{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "15b19119",
   "metadata": {
    "_kg_hide-input": false,
    "execution": {
     "iopub.execute_input": "2024-04-25T14:58:01.379900Z",
     "iopub.status.busy": "2024-04-25T14:58:01.379557Z",
     "iopub.status.idle": "2024-04-25T14:58:22.069106Z",
     "shell.execute_reply": "2024-04-25T14:58:22.068271Z"
    },
    "papermill": {
     "duration": 20.700516,
     "end_time": "2024-04-25T14:58:22.071541",
     "exception": false,
     "start_time": "2024-04-25T14:58:01.371025",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/dask/dataframe/_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.\n",
      "  warnings.warn(\n",
      "2024-04-25 14:58:10.262692: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-04-25 14:58:10.262791: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-04-25 14:58:10.459798: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import polars as pl\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import lightgbm as lgb\n",
    "import tensorflow as tf\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import OneHotEncoder,LabelEncoder\n",
    "from sklearn.metrics import roc_auc_score \n",
    "from sklearn.utils import shuffle\n",
    "import warnings\n",
    "from sklearn.model_selection import GroupKFold, StratifiedGroupKFold\n",
    "from sklearn.base import BaseEstimator, RegressorMixin\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from sklearn.feature_extraction import FeatureHasher\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from tensorflow.keras.datasets import cifar10\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Flatten\n",
    "from tensorflow.keras import optimizers\n",
    "\n",
    "\n",
    "dataPath = \"/kaggle/input/home-credit-credit-risk-model-stability/\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce0b8ef5",
   "metadata": {
    "papermill": {
     "duration": 0.006927,
     "end_time": "2024-04-25T14:58:22.085902",
     "exception": false,
     "start_time": "2024-04-25T14:58:22.078975",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset\n",
    "\n",
    "This is given code used to load in the data frome kaggle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "faeab6e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:58:22.101477Z",
     "iopub.status.busy": "2024-04-25T14:58:22.100494Z",
     "iopub.status.idle": "2024-04-25T14:58:22.117553Z",
     "shell.execute_reply": "2024-04-25T14:58:22.116826Z"
    },
    "papermill": {
     "duration": 0.026816,
     "end_time": "2024-04-25T14:58:22.119506",
     "exception": false,
     "start_time": "2024-04-25T14:58:22.092690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def set_table_dtypes(df: pl.DataFrame) -> pl.DataFrame:\n",
    "    # implement here all desired dtypes for tables\n",
    "    # the following is just an example\n",
    "    for col in df.columns:\n",
    "        # last letter of column name will help you determine the type\n",
    "        if col[-1] in (\"P\", \"A\"):\n",
    "                df = df.with_columns(pl.col(col).cast(pl.Float64))\n",
    "    return df\n",
    "\n",
    "def convert_strings(df: pd.DataFrame) -> pd.DataFrame: \n",
    "    for col in df.columns:  \n",
    "        if df[col].dtype.name in ['object', 'string']:\n",
    "            df[col] = df[col].astype(\"string\").astype('category')\n",
    "            current_categories = df[col].cat.categories\n",
    "            new_categories = current_categories.to_list() + [\"Unknown\"]\n",
    "            new_dtype = pd.CategoricalDtype(categories=new_categories, ordered=True)\n",
    "            df[col] = df[col].astype(new_dtype)\n",
    "    return df\n",
    "\n",
    "#https://www.kaggle.com/code/darynarr/home-credit-drop-date-features/notebook\n",
    "def reduce_memory_usage_pl(df):\n",
    "        \"\"\" Reduce memory usage by polars dataframe {df} with name {name} by changing its data types.\n",
    "            Original pandas version of this function: https://www.kaggle.com/code/arjanso/reducing-dataframe-memory-size-by-65 \"\"\"\n",
    "        print(f\"Memory usage of dataframe is {round(df.estimated_size('mb'), 2)} MB\")\n",
    "        Numeric_Int_types = [pl.Int8,pl.Int16,pl.Int32,pl.Int64]\n",
    "        Numeric_Float_types = [pl.Float32,pl.Float64]    \n",
    "        for col in df.columns:\n",
    "            try:\n",
    "                col_type = df[col].dtype\n",
    "                if col_type == pl.Categorical:\n",
    "                    continue\n",
    "                c_min = df[col].min()\n",
    "                c_max = df[col].max()\n",
    "                if col_type in Numeric_Int_types:\n",
    "                    if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n",
    "                        df = df.with_columns(df[col].cast(pl.Int32))\n",
    "                    elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n",
    "                        df = df.with_columns(df[col].cast(pl.Int16))\n",
    "                    elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n",
    "                        df = df.with_columns(df[col].cast(pl.Int32))\n",
    "                    elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n",
    "                        df = df.with_columns(df[col].cast(pl.Int64))\n",
    "                elif col_type in Numeric_Float_types:\n",
    "                    if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n",
    "                        df = df.with_columns(df[col].cast(pl.Float32))\n",
    "                    else:\n",
    "                        pass\n",
    "                # elif col_type == pl.Utf8:\n",
    "                #     df = df.with_columns(df[col].cast(pl.Categorical))\n",
    "                else:\n",
    "                    pass\n",
    "            except:\n",
    "                pass\n",
    "        print(f\"Memory usage of dataframe became {round(df.estimated_size('mb'), 2)} MB\")\n",
    "        return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "50d26bbd",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2024-04-25T14:58:22.134000Z",
     "iopub.status.busy": "2024-04-25T14:58:22.133548Z",
     "iopub.status.idle": "2024-04-25T14:59:01.942536Z",
     "shell.execute_reply": "2024-04-25T14:59:01.941747Z"
    },
    "papermill": {
     "duration": 39.818771,
     "end_time": "2024-04-25T14:59:01.944947",
     "exception": false,
     "start_time": "2024-04-25T14:58:22.126176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_basetable = pl.read_csv(dataPath+'csv_files/train/train_base.csv').pipe(set_table_dtypes)\n",
    "\n",
    "train_static = pl.concat(\n",
    "[pl.read_csv(dataPath + \"csv_files/train/train_static_0_0.csv\").pipe(set_table_dtypes),\n",
    "pl.read_csv(dataPath + \"csv_files/train/train_static_0_1.csv\").pipe(set_table_dtypes)\n",
    "],how = 'vertical_relaxed',\n",
    ")\n",
    "\n",
    "train_applprev = pl.concat(\n",
    "[pl.read_csv(dataPath + \"csv_files/train/train_applprev_1_0.csv\").pipe(set_table_dtypes),\n",
    "pl.read_csv(dataPath + \"csv_files/train/train_applprev_1_1.csv\").pipe(set_table_dtypes)   \n",
    "],how = 'vertical_relaxed',\n",
    ")\n",
    "\n",
    "train_static_cb = pl.read_csv(dataPath + \"csv_files/train/train_static_cb_0.csv\").pipe(set_table_dtypes)\n",
    "train_person_1 = pl.read_csv(dataPath + \"csv_files/train/train_person_1.csv\").pipe(set_table_dtypes)\n",
    "train_credit_bureau_a_2_5 = pl.read_csv(dataPath + \"csv_files/train/train_credit_bureau_a_2_5.csv\").pipe(set_table_dtypes)\n",
    "train_deposit_1 = pl.read_csv(dataPath + \"csv_files/train/train_deposit_1.csv\").pipe(set_table_dtypes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f8721632",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:01.959554Z",
     "iopub.status.busy": "2024-04-25T14:59:01.959277Z",
     "iopub.status.idle": "2024-04-25T14:59:02.043267Z",
     "shell.execute_reply": "2024-04-25T14:59:02.042298Z"
    },
    "papermill": {
     "duration": 0.093618,
     "end_time": "2024-04-25T14:59:02.045442",
     "exception": false,
     "start_time": "2024-04-25T14:59:01.951824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_basetable = pl.read_csv(dataPath+'csv_files/test/test_base.csv').pipe(set_table_dtypes)\n",
    "\n",
    "test_static = pl.concat(\n",
    "[pl.read_csv(dataPath + \"csv_files/test/test_static_0_0.csv\").pipe(set_table_dtypes),\n",
    "pl.read_csv(dataPath + \"csv_files/test/test_static_0_1.csv\").pipe(set_table_dtypes)\n",
    "],how = 'vertical_relaxed',\n",
    ")\n",
    "test_applprev = pl.concat(\n",
    "[       pl.read_csv(dataPath + \"csv_files/test/test_applprev_1_0.csv\").pipe(set_table_dtypes),\n",
    "        pl.read_csv(dataPath + \"csv_files/test/test_applprev_1_1.csv\").pipe(set_table_dtypes),    \n",
    "],how = 'vertical_relaxed',\n",
    ")\n",
    "\n",
    "test_static_cb = pl.read_csv(dataPath + \"csv_files/test/test_static_cb_0.csv\").pipe(set_table_dtypes)\n",
    "test_person_1 = pl.read_csv(dataPath + \"csv_files/test/test_person_1.csv\").pipe(set_table_dtypes)\n",
    "test_credit_bureau_a_2_5 = pl.read_csv(dataPath + \"csv_files/test/test_credit_bureau_a_2_5.csv\").pipe(set_table_dtypes)\n",
    "test_deposit_1 = pl.read_csv(dataPath + \"csv_files/test/test_deposit_1.csv\").pipe(set_table_dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b3ac3bd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:02.060425Z",
     "iopub.status.busy": "2024-04-25T14:59:02.060163Z",
     "iopub.status.idle": "2024-04-25T14:59:05.558315Z",
     "shell.execute_reply": "2024-04-25T14:59:05.557403Z"
    },
    "papermill": {
     "duration": 3.508481,
     "end_time": "2024-04-25T14:59:05.560455",
     "exception": false,
     "start_time": "2024-04-25T14:59:02.051974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Memory usage of dataframe is 635.99 MB\n",
      "Memory usage of dataframe became 612.69 MB\n",
      "Memory usage of dataframe is 0.0 MB\n",
      "Memory usage of dataframe became 0.0 MB\n"
     ]
    }
   ],
   "source": [
    "class FeatureEngineer:\n",
    "    def __init__(self, train_basetable, train_static, train_static_cb,\n",
    "                 train_person_1, train_credit_bureau_a_2_5,train_deposit_1,train_applprev):\n",
    "        \n",
    "        self.train_basetable = train_basetable\n",
    "        self.train_static = train_static\n",
    "        self.train_static_cb = train_static_cb\n",
    "        self.train_person_1 = train_person_1\n",
    "        self.train_credit_bureau_a_2_5 = train_credit_bureau_a_2_5\n",
    "        self.train_deposit_1 = train_deposit_1\n",
    "        self.train_applprev = train_applprev\n",
    "        \n",
    "        \n",
    "    def generate_person_features(self):\n",
    "        # Aggregating features from train_person_1\n",
    "        train_person_1_feats_1 = self.train_person_1.group_by(\"case_id\").agg(\n",
    "            pl.col(\"mainoccupationinc_384A\").max().alias(\"mainoccupationinc_384A_maxA\"),\n",
    "            (pl.col(\"incometype_1044T\") == \"SELFEMPLOYED\").max().alias(\"mainoccupationinc_384A_any_selfemployedA\"),\n",
    "            pl.col(\"childnum_185L\").sum().alias(\"total_childrenL\").cast(pl.Int32)\n",
    "        )\n",
    "        \n",
    "        # Filtering and selecting features from train_person_1\n",
    "        train_person_1_feats_2 = self.train_person_1.select([\"case_id\", \"num_group1\", \"housetype_905L\"]).filter(\n",
    "            pl.col(\"num_group1\") == 0).drop(\"num_group1\").rename({\"housetype_905L\": \"person_housetypeL\"})\n",
    "        \n",
    "        \n",
    "        return train_person_1_feats_1, train_person_1_feats_2\n",
    "    \n",
    "    \n",
    "    def deposit_frequency(self):\n",
    "        deposit_frequency = self.train_deposit_1.group_by(\"case_id\").agg(\n",
    "        pl.count(\"amount_416A\").alias(\"deposit_countL\")\n",
    "    )   \n",
    "        return deposit_frequency\n",
    "    \n",
    "    \n",
    "    def generate_applprev(self):\n",
    "         # Total Payment Amount\n",
    "            total_payment_amount = self.train_applprev.group_by(\"case_id\").agg(\n",
    "                pl.col(\"pmtnum_8L\").sum().alias(\"total_payment_amountL\"))\n",
    "            \n",
    "            # average Annuity\n",
    "            avg_annuity = self.train_applprev.group_by(\"case_id\").agg(\n",
    "                pl.col(\"annuity_853A\").mean().alias(\"avg_annuityA\"))\n",
    "\n",
    "            \n",
    "            #payment_rate = self.train_applprev.with_columns(\n",
    "                #(pl.col(\"annuity_853A\")/pl.col(\"credamount_590A\")).alias(\"payment_rateL\"))\n",
    "\n",
    "            return total_payment_amount,avg_annuity #payment_rate\n",
    "\n",
    "           \n",
    "    \n",
    "    def generate_static_columns(self, df):\n",
    "        selected_static_cols = [col for col in df.columns if col[-1] in (\"A\", \"M\")]\n",
    "        return df.select([\"case_id\"] + selected_static_cols) \n",
    "     \n",
    " \n",
    "        # Generating features\n",
    "    def join_tables(self):\n",
    "        person_feats_1, person_feats_2 = self.generate_person_features()\n",
    "        deposit_frequency = self.deposit_frequency()\n",
    "        total_payment_amount,avg_annuity = self.generate_applprev()\n",
    "         \n",
    "        # Selecting static columns\n",
    "        selected_static = self.generate_static_columns(self.train_static)\n",
    "        selected_static_cb = self.generate_static_columns(self.train_static_cb)\n",
    "        \n",
    "        #joining data\n",
    "        data = self.train_basetable.join(selected_static, how=\"left\", on=\"case_id\") \\\n",
    "                                   .join(selected_static_cb, how=\"left\", on=\"case_id\") \\\n",
    "                                   .join(person_feats_1, how=\"left\", on=\"case_id\") \\\n",
    "                                   .join(person_feats_2, how=\"left\", on=\"case_id\") \\\n",
    "                                   .join(deposit_frequency, how=\"left\", on=\"case_id\") \\\n",
    "                                   .join(total_payment_amount, how=\"left\", on=\"case_id\") \\\n",
    "                                   .join(avg_annuity, how=\"left\", on=\"case_id\") \n",
    "\n",
    "                                   #.join(payment_rate, how=\"left\", on=\"case_id\") \n",
    "\n",
    "        data = data.with_columns(\n",
    "            pl.col(pl.Float64).cast(pl.Float32)\n",
    "        )\n",
    "        \n",
    "        \n",
    "        return data\n",
    "    \n",
    "            \n",
    "       # Generate and join features for the test set\n",
    "    def process_test_set(self, test_basetable, test_static, test_static_cb, test_person_1, test_credit_bureau_a_2_5, test_deposit_1,test_applprev):\n",
    "        fe_test = FeatureEngineer(test_basetable, test_static, test_static_cb, test_person_1, test_credit_bureau_a_2_5, test_deposit_1,test_applprev)\n",
    "        \n",
    "        test_data = fe_test.join_tables()\n",
    "\n",
    "\n",
    "        return test_data\n",
    "    \n",
    "\n",
    "fe = FeatureEngineer(train_basetable, train_static, train_static_cb, train_person_1,\n",
    "                     train_credit_bureau_a_2_5,train_deposit_1,train_applprev)\n",
    "\n",
    "data = fe.join_tables()\n",
    "data = reduce_memory_usage_pl(data)\n",
    "\n",
    "\n",
    "test_data = fe.process_test_set(test_basetable, test_static, test_static_cb,\n",
    "                                test_person_1, test_credit_bureau_a_2_5, test_deposit_1,test_applprev)\n",
    "\n",
    "test_data = reduce_memory_usage_pl(test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ed2065ef",
   "metadata": {
    "_kg_hide-output": false,
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:05.574935Z",
     "iopub.status.busy": "2024-04-25T14:59:05.574603Z",
     "iopub.status.idle": "2024-04-25T14:59:08.334020Z",
     "shell.execute_reply": "2024-04-25T14:59:08.332864Z"
    },
    "papermill": {
     "duration": 2.76939,
     "end_time": "2024-04-25T14:59:08.336557",
     "exception": false,
     "start_time": "2024-04-25T14:59:05.567167",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "case_ids = data[\"case_id\"].unique().shuffle(seed=1)\n",
    "case_ids_train, case_ids_test = train_test_split(case_ids, train_size=0.6, random_state=42)\n",
    "case_ids_valid, case_ids_test = train_test_split(case_ids_test, train_size=0.5, random_state=42)\n",
    "\n",
    "cols_pred = []\n",
    "for col in data.columns:\n",
    "    if col[-1].isupper() and col[:-1].islower():\n",
    "        cols_pred.append(col)\n",
    "\n",
    "        \n",
    "def from_polars_to_pandas(case_ids: pl.DataFrame) -> pl.DataFrame:\n",
    "    return (\n",
    "        data.filter(pl.col(\"case_id\").is_in(case_ids))[[\"case_id\", \"WEEK_NUM\", \"target\"]].to_pandas(),\n",
    "        data.filter(pl.col(\"case_id\").is_in(case_ids))[cols_pred].to_pandas(),\n",
    "        data.filter(pl.col(\"case_id\").is_in(case_ids))[\"target\"].to_pandas()\n",
    "    )\n",
    "\n",
    "base_train, X_train, y_train = from_polars_to_pandas(case_ids_train)\n",
    "base_valid, X_valid, y_valid = from_polars_to_pandas(case_ids_valid)\n",
    "base_test, X_test, y_test = from_polars_to_pandas(case_ids_test)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c75c3b8f",
   "metadata": {
    "papermill": {
     "duration": 0.007263,
     "end_time": "2024-04-25T14:59:08.351672",
     "exception": false,
     "start_time": "2024-04-25T14:59:08.344409",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Establish Categorical Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "49cbc380",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:08.368494Z",
     "iopub.status.busy": "2024-04-25T14:59:08.368154Z",
     "iopub.status.idle": "2024-04-25T14:59:08.386993Z",
     "shell.execute_reply": "2024-04-25T14:59:08.386080Z"
    },
    "papermill": {
     "duration": 0.030141,
     "end_time": "2024-04-25T14:59:08.389123",
     "exception": false,
     "start_time": "2024-04-25T14:59:08.358982",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'lastapprcommoditycat_1041M': 'object',\n",
       " 'lastapprcommoditytypec_5251766M': 'object',\n",
       " 'lastcancelreason_561M': 'object',\n",
       " 'lastrejectcommoditycat_161M': 'object',\n",
       " 'lastrejectcommodtypec_5251769M': 'object',\n",
       " 'lastrejectreason_759M': 'object',\n",
       " 'lastrejectreasonclient_4145040M': 'object',\n",
       " 'previouscontdistrict_112M': 'object',\n",
       " 'description_5085714M': 'object',\n",
       " 'education_1103M': 'object',\n",
       " 'education_88M': 'object',\n",
       " 'maritalst_385M': 'object',\n",
       " 'maritalst_893M': 'object',\n",
       " 'person_housetypeL': 'object'}"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index = X_train.dtypes.index.to_list()\n",
    "\n",
    "categoricals = {}\n",
    "\n",
    "for i in range(len(X_train.dtypes)):\n",
    "    \n",
    "    if X_train.dtypes.iloc[i] == \"float32\" or X_train.dtypes.iloc[i] == \"float64\" or X_train.dtypes.iloc[i] == \"int32\":\n",
    "        continue\n",
    "    else:\n",
    "        categoricals[index[i]] = str(X_train.dtypes.iloc[i])\n",
    "\n",
    "categoricals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7043dc38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:08.405195Z",
     "iopub.status.busy": "2024-04-25T14:59:08.404870Z",
     "iopub.status.idle": "2024-04-25T14:59:08.409854Z",
     "shell.execute_reply": "2024-04-25T14:59:08.408798Z"
    },
    "papermill": {
     "duration": 0.014996,
     "end_time": "2024-04-25T14:59:08.411815",
     "exception": false,
     "start_time": "2024-04-25T14:59:08.396819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train:(915995, 53)\n",
      "Valid: (305332, 53)\n",
      "Test: (305332, 53)\n"
     ]
    }
   ],
   "source": [
    "print(f\"X_train:{X_train.shape}\")\n",
    "print(f\"Valid: {X_valid.shape}\")\n",
    "print(f\"Test: {X_test.shape}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a427532a",
   "metadata": {
    "papermill": {
     "duration": 0.007152,
     "end_time": "2024-04-25T14:59:08.426309",
     "exception": false,
     "start_time": "2024-04-25T14:59:08.419157",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## User Generated Functions\n",
    "\n",
    "These are functions I have made to preprocess the data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "178e22bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:08.442302Z",
     "iopub.status.busy": "2024-04-25T14:59:08.442009Z",
     "iopub.status.idle": "2024-04-25T14:59:08.455497Z",
     "shell.execute_reply": "2024-04-25T14:59:08.454575Z"
    },
    "papermill": {
     "duration": 0.023806,
     "end_time": "2024-04-25T14:59:08.457535",
     "exception": false,
     "start_time": "2024-04-25T14:59:08.433729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def col_hasher(df: pd.DataFrame, cols: [str]) -> pd.DataFrame:\n",
    "    \"\"\"\n",
    "    Hashes a list of dataframe columns, modifies pandas chained_assignment warning to suppress false positives\n",
    "    \n",
    "    @params:\n",
    "        df:  Pandas DataFrame, REQUIRED\n",
    "        cols: List of strings representing the columns in the dataframe\n",
    "        \n",
    "    @returns:\n",
    "        df: Pandas DataFrame with hashed columns\n",
    "    \"\"\"\n",
    "    \n",
    "    pd.options.mode.chained_assignment = None\n",
    "    for col in cols:\n",
    "        hashed = pd.util.hash_array(np.array(df[col]))\n",
    "        df[col] = hashed\n",
    "        \n",
    "    pd.reset_option(\"mode.chained_assignment\")\n",
    "    return df\n",
    "\n",
    "\n",
    "def gen_synthetic(x_data: pd.DataFrame, n: int, y_data: pd.Series, syn_type: int):\n",
    "    \"\"\"\n",
    "    x: X_train\n",
    "    n: number of entries to generate\n",
    "    y: y_train\n",
    "    syn_type: class to generate, either 0 or 1\n",
    "    \"\"\"\n",
    "    \n",
    "    \n",
    "    x_data = x_data.assign(target=y_data.values)\n",
    "    x_data = x_data[x_data['target'] == syn_type]\n",
    "    x_data = x_data.drop('target', axis = 1)\n",
    "    \n",
    "    syn_y = []\n",
    "\n",
    "    syn_data = {}\n",
    "    for col in x_data.columns.to_list():\n",
    "        syn_data[col] = []\n",
    "        data = x_data[col].value_counts().index.to_list()\n",
    "        marginal = list(marginals(x_data, col).values())\n",
    "        synthetic = np.random.choice(data, size=n, p=marginal)\n",
    "        \n",
    "        for syn_data_point in synthetic:\n",
    "            syn_data[col].append(syn_data_point)\n",
    "    \n",
    "    for i in range(n):\n",
    "        syn_y.append(1)\n",
    "        \n",
    "    syn_x = pd.DataFrame.from_dict(syn_data)\n",
    "    syn_y = pd.Series(syn_y)\n",
    "    return syn_x, syn_y\n",
    "\n",
    "def marginals(df: pd.DataFrame, col: str) -> {}:\n",
    "    \"\"\"\n",
    "    maps the probabilty of an occurence to the occurence\n",
    "    \"\"\"\n",
    "    data = df[col].value_counts()\n",
    "    results = [x for x in data]\n",
    "    labels = df[col].value_counts().index.to_list()\n",
    "    syn_rep = {}\n",
    "    \n",
    "    for x in range(len(labels)):\n",
    "        syn_rep[labels[x]] = max(0, results[x])\n",
    "    \n",
    "    total = sum(syn_rep.values())\n",
    "    \n",
    "    marginal = {}\n",
    "    for x in labels:\n",
    "        marginal[x] = syn_rep[x] / total\n",
    "    return marginal\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2d29ae40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:08.473507Z",
     "iopub.status.busy": "2024-04-25T14:59:08.473238Z",
     "iopub.status.idle": "2024-04-25T14:59:10.982348Z",
     "shell.execute_reply": "2024-04-25T14:59:10.981586Z"
    },
    "papermill": {
     "duration": 2.519654,
     "end_time": "2024-04-25T14:59:10.984762",
     "exception": false,
     "start_time": "2024-04-25T14:59:08.465108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "hashed_X_train = col_hasher(X_train, list(categoricals.keys()))\n",
    "hashed_X_valid = col_hasher(X_valid, list(categoricals.keys()))\n",
    "hashed_X_test = col_hasher(X_test, list(categoricals.keys()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "11bb5beb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:11.000229Z",
     "iopub.status.busy": "2024-04-25T14:59:10.999747Z",
     "iopub.status.idle": "2024-04-25T14:59:22.134110Z",
     "shell.execute_reply": "2024-04-25T14:59:22.132946Z"
    },
    "papermill": {
     "duration": 11.144684,
     "end_time": "2024-04-25T14:59:22.136730",
     "exception": false,
     "start_time": "2024-04-25T14:59:10.992046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "syn_x, syn_y = gen_synthetic(x_data = X_train, n = int(len(X_train) / 4), y_data = y_train, syn_type = 1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ea6b0877",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:22.161396Z",
     "iopub.status.busy": "2024-04-25T14:59:22.160587Z",
     "iopub.status.idle": "2024-04-25T14:59:22.448310Z",
     "shell.execute_reply": "2024-04-25T14:59:22.447187Z"
    },
    "papermill": {
     "duration": 0.305169,
     "end_time": "2024-04-25T14:59:22.451388",
     "exception": false,
     "start_time": "2024-04-25T14:59:22.146219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "xtrain = X_train.fillna(0)\n",
    "xval = X_valid.fillna(0)\n",
    "xtest = X_test.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5238ea12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:22.479364Z",
     "iopub.status.busy": "2024-04-25T14:59:22.478519Z",
     "iopub.status.idle": "2024-04-25T14:59:22.640459Z",
     "shell.execute_reply": "2024-04-25T14:59:22.639358Z"
    },
    "papermill": {
     "duration": 0.181732,
     "end_time": "2024-04-25T14:59:22.643620",
     "exception": false,
     "start_time": "2024-04-25T14:59:22.461888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "syn_X_train = pd.concat([syn_x, X_train.head(int(len(X_train) / 2))])\n",
    "syn_y_train = pd.concat([syn_y, y_train.head(int(len(y_train) / 2))])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "11f48c0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:22.663260Z",
     "iopub.status.busy": "2024-04-25T14:59:22.662948Z",
     "iopub.status.idle": "2024-04-25T14:59:22.995171Z",
     "shell.execute_reply": "2024-04-25T14:59:22.994163Z"
    },
    "papermill": {
     "duration": 0.343841,
     "end_time": "2024-04-25T14:59:22.998091",
     "exception": false,
     "start_time": "2024-04-25T14:59:22.654250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Merge and shuffle data\n",
    "syn_X_train['target'] = syn_y_train\n",
    "syn_X_train = syn_X_train.sample(frac = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "decd227f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:23.016944Z",
     "iopub.status.busy": "2024-04-25T14:59:23.016626Z",
     "iopub.status.idle": "2024-04-25T14:59:23.048422Z",
     "shell.execute_reply": "2024-04-25T14:59:23.047632Z"
    },
    "papermill": {
     "duration": 0.042499,
     "end_time": "2024-04-25T14:59:23.050669",
     "exception": false,
     "start_time": "2024-04-25T14:59:23.008170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "columns_to_use = ['avgoutstandbalancel6m_4187114A', 'downpmt_116A', \n",
    "           'lastrejectcredamount_222A', 'lastrejectreason_759M',  'maxannuity_159A', 'totaldebt_9A', \n",
    "            'totinstallast1m_4525188A', 'education_88M']\n",
    "\n",
    "filtered_X_train = hashed_X_train[columns_to_use]\n",
    "filtered_X_valid = hashed_X_valid[columns_to_use]\n",
    "filtered_X_test = hashed_X_test[columns_to_use]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d38e2acd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:23.065605Z",
     "iopub.status.busy": "2024-04-25T14:59:23.065335Z",
     "iopub.status.idle": "2024-04-25T14:59:23.600738Z",
     "shell.execute_reply": "2024-04-25T14:59:23.599764Z"
    },
    "papermill": {
     "duration": 0.545501,
     "end_time": "2024-04-25T14:59:23.603019",
     "exception": false,
     "start_time": "2024-04-25T14:59:23.057518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>amtinstpaidbefduel24m_4187115A</th>\n",
       "      <th>annuity_780A</th>\n",
       "      <th>annuitynextmonth_57A</th>\n",
       "      <th>avginstallast24m_3658937A</th>\n",
       "      <th>avglnamtstart24m_4525187A</th>\n",
       "      <th>avgoutstandbalancel6m_4187114A</th>\n",
       "      <th>avgpmtlast12m_4525200A</th>\n",
       "      <th>credamount_770A</th>\n",
       "      <th>currdebt_22A</th>\n",
       "      <th>currdebtcredtyperange_828A</th>\n",
       "      <th>...</th>\n",
       "      <th>maritalst_893M</th>\n",
       "      <th>pmtaverage_3A</th>\n",
       "      <th>pmtaverage_4527227A</th>\n",
       "      <th>pmtaverage_4955615A</th>\n",
       "      <th>pmtssum_45A</th>\n",
       "      <th>total_childrenL</th>\n",
       "      <th>person_housetypeL</th>\n",
       "      <th>deposit_countL</th>\n",
       "      <th>total_payment_amountL</th>\n",
       "      <th>avg_annuityA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>318501</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2057.199951</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>16540.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.540399e+19</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1.844674e+19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184306</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>4379.800293</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>50576.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.540399e+19</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8057.560059</td>\n",
       "      <td>0</td>\n",
       "      <td>1.844674e+19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>4672.800293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174103</th>\n",
       "      <td>35620.800781</td>\n",
       "      <td>2626.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2725.800049</td>\n",
       "      <td>23840.201172</td>\n",
       "      <td>14277.400391</td>\n",
       "      <td>3352.800049</td>\n",
       "      <td>32000.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20676.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.540399e+19</td>\n",
       "      <td>7553.000000</td>\n",
       "      <td>4383.600098</td>\n",
       "      <td>14430.400391</td>\n",
       "      <td>1710.800049</td>\n",
       "      <td>0</td>\n",
       "      <td>1.844674e+19</td>\n",
       "      <td>1.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>3375.342773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>202208</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>7539.399902</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>90392.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.540399e+19</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>19148.380859</td>\n",
       "      <td>0</td>\n",
       "      <td>1.844674e+19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170771</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2220.800049</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3710.600098</td>\n",
       "      <td>16503.599609</td>\n",
       "      <td>204029.062500</td>\n",
       "      <td>4272.200195</td>\n",
       "      <td>121564.601562</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.540399e+19</td>\n",
       "      <td>10951.700195</td>\n",
       "      <td>7222.200195</td>\n",
       "      <td>15467.400391</td>\n",
       "      <td>20266.095703</td>\n",
       "      <td>0</td>\n",
       "      <td>1.844674e+19</td>\n",
       "      <td>1.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>3317.133301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170139</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2563.400146</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>23996.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.540399e+19</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13180.609375</td>\n",
       "      <td>0</td>\n",
       "      <td>1.844674e+19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25029</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2487.600098</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.540399e+19</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1.844674e+19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34387</th>\n",
       "      <td>2321.600098</td>\n",
       "      <td>1354.599976</td>\n",
       "      <td>5108.800293</td>\n",
       "      <td>8551.799805</td>\n",
       "      <td>60050.000000</td>\n",
       "      <td>6883.567871</td>\n",
       "      <td>2636.199951</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.540399e+19</td>\n",
       "      <td>5147.666992</td>\n",
       "      <td>7221.600098</td>\n",
       "      <td>12936.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1.844674e+19</td>\n",
       "      <td>2.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>6733.100098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>340839</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1350.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>16198.200195</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.540399e+19</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1.844674e+19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>5215.399902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>331988</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>919.400024</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7800.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.540399e+19</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1.844674e+19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>2458.199951</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>686995 rows × 53 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        amtinstpaidbefduel24m_4187115A  annuity_780A  annuitynextmonth_57A  \\\n",
       "318501                        0.000000   2057.199951              0.000000   \n",
       "184306                        0.000000   4379.800293              0.000000   \n",
       "174103                    35620.800781   2626.000000              0.000000   \n",
       "202208                        0.000000   7539.399902              0.000000   \n",
       "170771                        0.000000   2220.800049              0.000000   \n",
       "...                                ...           ...                   ...   \n",
       "170139                        0.000000   2563.400146              0.000000   \n",
       "25029                         0.000000   2487.600098              0.000000   \n",
       "34387                      2321.600098   1354.599976           5108.800293   \n",
       "340839                        0.000000   1350.000000              0.000000   \n",
       "331988                        0.000000    919.400024              0.000000   \n",
       "\n",
       "        avginstallast24m_3658937A  avglnamtstart24m_4525187A  \\\n",
       "318501                   0.000000                   0.000000   \n",
       "184306                   0.000000                   0.000000   \n",
       "174103                2725.800049               23840.201172   \n",
       "202208                   0.000000                   0.000000   \n",
       "170771                3710.600098               16503.599609   \n",
       "...                           ...                        ...   \n",
       "170139                   0.000000                   0.000000   \n",
       "25029                    0.000000                   0.000000   \n",
       "34387                 8551.799805               60050.000000   \n",
       "340839                   0.000000                   0.000000   \n",
       "331988                   0.000000                   0.000000   \n",
       "\n",
       "        avgoutstandbalancel6m_4187114A  avgpmtlast12m_4525200A  \\\n",
       "318501                        0.000000                0.000000   \n",
       "184306                        0.000000                0.000000   \n",
       "174103                    14277.400391             3352.800049   \n",
       "202208                        0.000000                0.000000   \n",
       "170771                   204029.062500             4272.200195   \n",
       "...                                ...                     ...   \n",
       "170139                        0.000000                0.000000   \n",
       "25029                         0.000000                0.000000   \n",
       "34387                      6883.567871             2636.199951   \n",
       "340839                        0.000000                0.000000   \n",
       "331988                        0.000000                0.000000   \n",
       "\n",
       "        credamount_770A  currdebt_22A  currdebtcredtyperange_828A  ...  \\\n",
       "318501     16540.000000           0.0                         0.0  ...   \n",
       "184306     50576.000000           0.0                         0.0  ...   \n",
       "174103     32000.000000           0.0                     20676.0  ...   \n",
       "202208     90392.000000           0.0                         0.0  ...   \n",
       "170771    121564.601562           0.0                         0.0  ...   \n",
       "...                 ...           ...                         ...  ...   \n",
       "170139     23996.000000           0.0                         0.0  ...   \n",
       "25029      10000.000000           0.0                         0.0  ...   \n",
       "34387      50000.000000           0.0                         0.0  ...   \n",
       "340839     16198.200195           0.0                         0.0  ...   \n",
       "331988      7800.000000           0.0                         0.0  ...   \n",
       "\n",
       "        maritalst_893M  pmtaverage_3A  pmtaverage_4527227A  \\\n",
       "318501    1.540399e+19       0.000000             0.000000   \n",
       "184306    1.540399e+19       0.000000             0.000000   \n",
       "174103    1.540399e+19    7553.000000          4383.600098   \n",
       "202208    1.540399e+19       0.000000             0.000000   \n",
       "170771    1.540399e+19   10951.700195          7222.200195   \n",
       "...                ...            ...                  ...   \n",
       "170139    1.540399e+19       0.000000             0.000000   \n",
       "25029     1.540399e+19       0.000000             0.000000   \n",
       "34387     1.540399e+19    5147.666992          7221.600098   \n",
       "340839    1.540399e+19       0.000000             0.000000   \n",
       "331988    1.540399e+19       0.000000             0.000000   \n",
       "\n",
       "        pmtaverage_4955615A   pmtssum_45A  total_childrenL  person_housetypeL  \\\n",
       "318501             0.000000      0.000000                0       1.844674e+19   \n",
       "184306             0.000000   8057.560059                0       1.844674e+19   \n",
       "174103         14430.400391   1710.800049                0       1.844674e+19   \n",
       "202208             0.000000  19148.380859                0       1.844674e+19   \n",
       "170771         15467.400391  20266.095703                0       1.844674e+19   \n",
       "...                     ...           ...              ...                ...   \n",
       "170139             0.000000  13180.609375                0       1.844674e+19   \n",
       "25029              0.000000      0.000000                0       1.844674e+19   \n",
       "34387          12936.000000      0.000000                0       1.844674e+19   \n",
       "340839             0.000000      0.000000                0       1.844674e+19   \n",
       "331988             0.000000      0.000000                0       1.844674e+19   \n",
       "\n",
       "        deposit_countL  total_payment_amountL  avg_annuityA  \n",
       "318501             0.0                    0.0      0.000000  \n",
       "184306             0.0                   28.0   4672.800293  \n",
       "174103             1.0                   73.0   3375.342773  \n",
       "202208             0.0                    0.0      0.000000  \n",
       "170771             1.0                   45.0   3317.133301  \n",
       "...                ...                    ...           ...  \n",
       "170139             0.0                    0.0      0.000000  \n",
       "25029              0.0                    0.0      0.000000  \n",
       "34387              2.0                   60.0   6733.100098  \n",
       "340839             0.0                    9.0   5215.399902  \n",
       "331988             0.0                   42.0   2458.199951  \n",
       "\n",
       "[686995 rows x 53 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "syn_y_train = syn_X_train['target']\n",
    "syn_X_train = syn_X_train.drop('target', axis = 1).fillna(0)\n",
    "syn_X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5f29f387",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:23.620113Z",
     "iopub.status.busy": "2024-04-25T14:59:23.619514Z",
     "iopub.status.idle": "2024-04-25T14:59:24.277544Z",
     "shell.execute_reply": "2024-04-25T14:59:24.276578Z"
    },
    "papermill": {
     "duration": 0.669079,
     "end_time": "2024-04-25T14:59:24.280157",
     "exception": false,
     "start_time": "2024-04-25T14:59:23.611078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>amtinstpaidbefduel24m_4187115A</th>\n",
       "      <th>annuity_780A</th>\n",
       "      <th>annuitynextmonth_57A</th>\n",
       "      <th>avginstallast24m_3658937A</th>\n",
       "      <th>avglnamtstart24m_4525187A</th>\n",
       "      <th>avgoutstandbalancel6m_4187114A</th>\n",
       "      <th>avgpmtlast12m_4525200A</th>\n",
       "      <th>credamount_770A</th>\n",
       "      <th>currdebt_22A</th>\n",
       "      <th>currdebtcredtyperange_828A</th>\n",
       "      <th>...</th>\n",
       "      <th>maritalst_893M</th>\n",
       "      <th>pmtaverage_3A</th>\n",
       "      <th>pmtaverage_4527227A</th>\n",
       "      <th>pmtaverage_4955615A</th>\n",
       "      <th>pmtssum_45A</th>\n",
       "      <th>total_childrenL</th>\n",
       "      <th>person_housetypeL</th>\n",
       "      <th>deposit_countL</th>\n",
       "      <th>total_payment_amountL</th>\n",
       "      <th>avg_annuityA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>318501</th>\n",
       "      <td>-0.454095</td>\n",
       "      <td>-0.651258</td>\n",
       "      <td>-0.459128</td>\n",
       "      <td>-0.539850</td>\n",
       "      <td>-0.481776</td>\n",
       "      <td>-0.459707</td>\n",
       "      <td>-0.403520</td>\n",
       "      <td>-0.739352</td>\n",
       "      <td>-0.357753</td>\n",
       "      <td>-0.281926</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03375</td>\n",
       "      <td>-0.621749</td>\n",
       "      <td>-0.647222</td>\n",
       "      <td>-0.678170</td>\n",
       "      <td>-0.524618</td>\n",
       "      <td>-0.043876</td>\n",
       "      <td>0.192148</td>\n",
       "      <td>-0.535558</td>\n",
       "      <td>-0.676693</td>\n",
       "      <td>-1.045687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184306</th>\n",
       "      <td>-0.454095</td>\n",
       "      <td>0.125365</td>\n",
       "      <td>-0.459128</td>\n",
       "      <td>-0.539850</td>\n",
       "      <td>-0.481776</td>\n",
       "      <td>-0.459707</td>\n",
       "      <td>-0.403520</td>\n",
       "      <td>-0.000883</td>\n",
       "      <td>-0.357753</td>\n",
       "      <td>-0.281926</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03375</td>\n",
       "      <td>-0.621749</td>\n",
       "      <td>-0.647222</td>\n",
       "      <td>-0.678170</td>\n",
       "      <td>0.113398</td>\n",
       "      <td>-0.043876</td>\n",
       "      <td>0.192148</td>\n",
       "      <td>-0.535558</td>\n",
       "      <td>-0.381767</td>\n",
       "      <td>0.924573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174103</th>\n",
       "      <td>0.155819</td>\n",
       "      <td>-0.461064</td>\n",
       "      <td>-0.459128</td>\n",
       "      <td>-0.065733</td>\n",
       "      <td>0.123460</td>\n",
       "      <td>-0.221971</td>\n",
       "      <td>0.075408</td>\n",
       "      <td>-0.403921</td>\n",
       "      <td>-0.357753</td>\n",
       "      <td>0.178102</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03375</td>\n",
       "      <td>1.004495</td>\n",
       "      <td>0.276279</td>\n",
       "      <td>1.126631</td>\n",
       "      <td>-0.389153</td>\n",
       "      <td>-0.043876</td>\n",
       "      <td>0.192148</td>\n",
       "      <td>0.595550</td>\n",
       "      <td>0.092222</td>\n",
       "      <td>0.377507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>202208</th>\n",
       "      <td>-0.454095</td>\n",
       "      <td>1.181861</td>\n",
       "      <td>-0.459128</td>\n",
       "      <td>-0.539850</td>\n",
       "      <td>-0.481776</td>\n",
       "      <td>-0.459707</td>\n",
       "      <td>-0.403520</td>\n",
       "      <td>0.862993</td>\n",
       "      <td>-0.357753</td>\n",
       "      <td>-0.281926</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03375</td>\n",
       "      <td>-0.621749</td>\n",
       "      <td>-0.647222</td>\n",
       "      <td>-0.678170</td>\n",
       "      <td>0.991593</td>\n",
       "      <td>-0.043876</td>\n",
       "      <td>0.192148</td>\n",
       "      <td>-0.535558</td>\n",
       "      <td>-0.676693</td>\n",
       "      <td>-1.045687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170771</th>\n",
       "      <td>-0.454095</td>\n",
       "      <td>-0.596554</td>\n",
       "      <td>-0.459128</td>\n",
       "      <td>0.105560</td>\n",
       "      <td>-0.062796</td>\n",
       "      <td>2.937635</td>\n",
       "      <td>0.206739</td>\n",
       "      <td>1.539336</td>\n",
       "      <td>-0.357753</td>\n",
       "      <td>-0.281926</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03375</td>\n",
       "      <td>1.736273</td>\n",
       "      <td>0.874292</td>\n",
       "      <td>1.256328</td>\n",
       "      <td>1.080096</td>\n",
       "      <td>-0.043876</td>\n",
       "      <td>0.192148</td>\n",
       "      <td>0.595550</td>\n",
       "      <td>-0.202704</td>\n",
       "      <td>0.352963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170139</th>\n",
       "      <td>-0.454095</td>\n",
       "      <td>-0.481996</td>\n",
       "      <td>-0.459128</td>\n",
       "      <td>-0.539850</td>\n",
       "      <td>-0.481776</td>\n",
       "      <td>-0.459707</td>\n",
       "      <td>-0.403520</td>\n",
       "      <td>-0.577581</td>\n",
       "      <td>-0.357753</td>\n",
       "      <td>-0.281926</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03375</td>\n",
       "      <td>-0.621749</td>\n",
       "      <td>-0.647222</td>\n",
       "      <td>-0.678170</td>\n",
       "      <td>0.519052</td>\n",
       "      <td>-0.043876</td>\n",
       "      <td>0.192148</td>\n",
       "      <td>-0.535558</td>\n",
       "      <td>-0.676693</td>\n",
       "      <td>-1.045687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25029</th>\n",
       "      <td>-0.454095</td>\n",
       "      <td>-0.507342</td>\n",
       "      <td>-0.459128</td>\n",
       "      <td>-0.539850</td>\n",
       "      <td>-0.481776</td>\n",
       "      <td>-0.459707</td>\n",
       "      <td>-0.403520</td>\n",
       "      <td>-0.881248</td>\n",
       "      <td>-0.357753</td>\n",
       "      <td>-0.281926</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03375</td>\n",
       "      <td>-0.621749</td>\n",
       "      <td>-0.647222</td>\n",
       "      <td>-0.678170</td>\n",
       "      <td>-0.524618</td>\n",
       "      <td>-0.043876</td>\n",
       "      <td>0.192148</td>\n",
       "      <td>-0.535558</td>\n",
       "      <td>-0.676693</td>\n",
       "      <td>-1.045687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34387</th>\n",
       "      <td>-0.414343</td>\n",
       "      <td>-0.886191</td>\n",
       "      <td>1.478161</td>\n",
       "      <td>0.947622</td>\n",
       "      <td>1.042724</td>\n",
       "      <td>-0.345087</td>\n",
       "      <td>-0.026954</td>\n",
       "      <td>-0.013380</td>\n",
       "      <td>-0.357753</td>\n",
       "      <td>-0.281926</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03375</td>\n",
       "      <td>0.486601</td>\n",
       "      <td>0.874166</td>\n",
       "      <td>0.939727</td>\n",
       "      <td>-0.524618</td>\n",
       "      <td>-0.043876</td>\n",
       "      <td>0.192148</td>\n",
       "      <td>1.726658</td>\n",
       "      <td>-0.044708</td>\n",
       "      <td>1.793286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>340839</th>\n",
       "      <td>-0.454095</td>\n",
       "      <td>-0.887729</td>\n",
       "      <td>-0.459128</td>\n",
       "      <td>-0.539850</td>\n",
       "      <td>-0.481776</td>\n",
       "      <td>-0.459707</td>\n",
       "      <td>-0.403520</td>\n",
       "      <td>-0.746768</td>\n",
       "      <td>-0.357753</td>\n",
       "      <td>-0.281926</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03375</td>\n",
       "      <td>-0.621749</td>\n",
       "      <td>-0.647222</td>\n",
       "      <td>-0.678170</td>\n",
       "      <td>-0.524618</td>\n",
       "      <td>-0.043876</td>\n",
       "      <td>0.192148</td>\n",
       "      <td>-0.535558</td>\n",
       "      <td>-0.581896</td>\n",
       "      <td>1.153357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>331988</th>\n",
       "      <td>-0.454095</td>\n",
       "      <td>-1.031712</td>\n",
       "      <td>-0.459128</td>\n",
       "      <td>-0.539850</td>\n",
       "      <td>-0.481776</td>\n",
       "      <td>-0.459707</td>\n",
       "      <td>-0.403520</td>\n",
       "      <td>-0.928981</td>\n",
       "      <td>-0.357753</td>\n",
       "      <td>-0.281926</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03375</td>\n",
       "      <td>-0.621749</td>\n",
       "      <td>-0.647222</td>\n",
       "      <td>-0.678170</td>\n",
       "      <td>-0.524618</td>\n",
       "      <td>-0.043876</td>\n",
       "      <td>0.192148</td>\n",
       "      <td>-0.535558</td>\n",
       "      <td>-0.234304</td>\n",
       "      <td>-0.009201</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>686995 rows × 53 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        amtinstpaidbefduel24m_4187115A  annuity_780A  annuitynextmonth_57A  \\\n",
       "318501                       -0.454095     -0.651258             -0.459128   \n",
       "184306                       -0.454095      0.125365             -0.459128   \n",
       "174103                        0.155819     -0.461064             -0.459128   \n",
       "202208                       -0.454095      1.181861             -0.459128   \n",
       "170771                       -0.454095     -0.596554             -0.459128   \n",
       "...                                ...           ...                   ...   \n",
       "170139                       -0.454095     -0.481996             -0.459128   \n",
       "25029                        -0.454095     -0.507342             -0.459128   \n",
       "34387                        -0.414343     -0.886191              1.478161   \n",
       "340839                       -0.454095     -0.887729             -0.459128   \n",
       "331988                       -0.454095     -1.031712             -0.459128   \n",
       "\n",
       "        avginstallast24m_3658937A  avglnamtstart24m_4525187A  \\\n",
       "318501                  -0.539850                  -0.481776   \n",
       "184306                  -0.539850                  -0.481776   \n",
       "174103                  -0.065733                   0.123460   \n",
       "202208                  -0.539850                  -0.481776   \n",
       "170771                   0.105560                  -0.062796   \n",
       "...                           ...                        ...   \n",
       "170139                  -0.539850                  -0.481776   \n",
       "25029                   -0.539850                  -0.481776   \n",
       "34387                    0.947622                   1.042724   \n",
       "340839                  -0.539850                  -0.481776   \n",
       "331988                  -0.539850                  -0.481776   \n",
       "\n",
       "        avgoutstandbalancel6m_4187114A  avgpmtlast12m_4525200A  \\\n",
       "318501                       -0.459707               -0.403520   \n",
       "184306                       -0.459707               -0.403520   \n",
       "174103                       -0.221971                0.075408   \n",
       "202208                       -0.459707               -0.403520   \n",
       "170771                        2.937635                0.206739   \n",
       "...                                ...                     ...   \n",
       "170139                       -0.459707               -0.403520   \n",
       "25029                        -0.459707               -0.403520   \n",
       "34387                        -0.345087               -0.026954   \n",
       "340839                       -0.459707               -0.403520   \n",
       "331988                       -0.459707               -0.403520   \n",
       "\n",
       "        credamount_770A  currdebt_22A  currdebtcredtyperange_828A  ...  \\\n",
       "318501        -0.739352     -0.357753                   -0.281926  ...   \n",
       "184306        -0.000883     -0.357753                   -0.281926  ...   \n",
       "174103        -0.403921     -0.357753                    0.178102  ...   \n",
       "202208         0.862993     -0.357753                   -0.281926  ...   \n",
       "170771         1.539336     -0.357753                   -0.281926  ...   \n",
       "...                 ...           ...                         ...  ...   \n",
       "170139        -0.577581     -0.357753                   -0.281926  ...   \n",
       "25029         -0.881248     -0.357753                   -0.281926  ...   \n",
       "34387         -0.013380     -0.357753                   -0.281926  ...   \n",
       "340839        -0.746768     -0.357753                   -0.281926  ...   \n",
       "331988        -0.928981     -0.357753                   -0.281926  ...   \n",
       "\n",
       "        maritalst_893M  pmtaverage_3A  pmtaverage_4527227A  \\\n",
       "318501         0.03375      -0.621749            -0.647222   \n",
       "184306         0.03375      -0.621749            -0.647222   \n",
       "174103         0.03375       1.004495             0.276279   \n",
       "202208         0.03375      -0.621749            -0.647222   \n",
       "170771         0.03375       1.736273             0.874292   \n",
       "...                ...            ...                  ...   \n",
       "170139         0.03375      -0.621749            -0.647222   \n",
       "25029          0.03375      -0.621749            -0.647222   \n",
       "34387          0.03375       0.486601             0.874166   \n",
       "340839         0.03375      -0.621749            -0.647222   \n",
       "331988         0.03375      -0.621749            -0.647222   \n",
       "\n",
       "        pmtaverage_4955615A  pmtssum_45A  total_childrenL  person_housetypeL  \\\n",
       "318501            -0.678170    -0.524618        -0.043876           0.192148   \n",
       "184306            -0.678170     0.113398        -0.043876           0.192148   \n",
       "174103             1.126631    -0.389153        -0.043876           0.192148   \n",
       "202208            -0.678170     0.991593        -0.043876           0.192148   \n",
       "170771             1.256328     1.080096        -0.043876           0.192148   \n",
       "...                     ...          ...              ...                ...   \n",
       "170139            -0.678170     0.519052        -0.043876           0.192148   \n",
       "25029             -0.678170    -0.524618        -0.043876           0.192148   \n",
       "34387              0.939727    -0.524618        -0.043876           0.192148   \n",
       "340839            -0.678170    -0.524618        -0.043876           0.192148   \n",
       "331988            -0.678170    -0.524618        -0.043876           0.192148   \n",
       "\n",
       "        deposit_countL  total_payment_amountL  avg_annuityA  \n",
       "318501       -0.535558              -0.676693     -1.045687  \n",
       "184306       -0.535558              -0.381767      0.924573  \n",
       "174103        0.595550               0.092222      0.377507  \n",
       "202208       -0.535558              -0.676693     -1.045687  \n",
       "170771        0.595550              -0.202704      0.352963  \n",
       "...                ...                    ...           ...  \n",
       "170139       -0.535558              -0.676693     -1.045687  \n",
       "25029        -0.535558              -0.676693     -1.045687  \n",
       "34387         1.726658              -0.044708      1.793286  \n",
       "340839       -0.535558              -0.581896      1.153357  \n",
       "331988       -0.535558              -0.234304     -0.009201  \n",
       "\n",
       "[686995 rows x 53 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalize_syn_x = (syn_X_train-syn_X_train.mean())/syn_X_train.std()\n",
    "normalize_syn_x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b7dde65",
   "metadata": {
    "papermill": {
     "duration": 0.008244,
     "end_time": "2024-04-25T14:59:24.298045",
     "exception": false,
     "start_time": "2024-04-25T14:59:24.289801",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Different Training Sets\n",
    "- X_train: standard data\n",
    "- xtrain: standard data with NaN values filled with 0\n",
    "- syn_X_train: standard data supplemented with synthetic data to help with the imbalance of target distributions\n",
    "- normalize_syn_x: syn_X_train but with values normalized"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cd9c68c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:59:24.316200Z",
     "iopub.status.busy": "2024-04-25T14:59:24.315887Z",
     "iopub.status.idle": "2024-04-25T15:00:49.689278Z",
     "shell.execute_reply": "2024-04-25T15:00:49.688283Z"
    },
    "papermill": {
     "duration": 85.385097,
     "end_time": "2024-04-25T15:00:49.691476",
     "exception": false,
     "start_time": "2024-04-25T14:59:24.306379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv1d (Conv1D)             (None, 42, 64)            832       \n",
      "                                                                 \n",
      " conv1d_1 (Conv1D)           (None, 36, 32)            14368     \n",
      "                                                                 \n",
      " max_pooling1d (MaxPooling1  (None, 36, 32)            0         \n",
      " D)                                                              \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 1152)              0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1024)              1180672   \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 10)                10250     \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 1206122 (4.60 MB)\n",
      "Trainable params: 1206122 (4.60 MB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n",
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1714057172.191409      85 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1342/1342 [==============================] - 15s 6ms/step - loss: 9.8560 - accuracy: 0.3532 - val_loss: 14.7706 - val_accuracy: 0.0314\n",
      "Epoch 2/10\n",
      "1342/1342 [==============================] - 7s 6ms/step - loss: 9.8598 - accuracy: 0.3534 - val_loss: 14.7706 - val_accuracy: 0.0314\n",
      "Epoch 3/10\n",
      "1342/1342 [==============================] - 8s 6ms/step - loss: 9.8598 - accuracy: 0.3534 - val_loss: 14.7706 - val_accuracy: 0.0314\n",
      "Epoch 4/10\n",
      "1342/1342 [==============================] - 7s 6ms/step - loss: 9.8598 - accuracy: 0.3534 - val_loss: 14.7706 - val_accuracy: 0.0314\n",
      "Epoch 5/10\n",
      "1342/1342 [==============================] - 7s 6ms/step - loss: 9.8598 - accuracy: 0.3534 - val_loss: 14.7706 - val_accuracy: 0.0314\n",
      "Epoch 6/10\n",
      "1342/1342 [==============================] - 7s 6ms/step - loss: 9.8598 - accuracy: 0.3534 - val_loss: 14.7706 - val_accuracy: 0.0314\n",
      "Epoch 7/10\n",
      "1342/1342 [==============================] - 8s 6ms/step - loss: 9.8598 - accuracy: 0.3534 - val_loss: 14.7706 - val_accuracy: 0.0314\n",
      "Epoch 8/10\n",
      "1342/1342 [==============================] - 7s 6ms/step - loss: 9.8598 - accuracy: 0.3534 - val_loss: 14.7706 - val_accuracy: 0.0314\n",
      "Epoch 9/10\n",
      "1342/1342 [==============================] - 8s 6ms/step - loss: 9.8598 - accuracy: 0.3534 - val_loss: 14.7706 - val_accuracy: 0.0314\n",
      "Epoch 10/10\n",
      "1342/1342 [==============================] - 8s 6ms/step - loss: 9.8598 - accuracy: 0.3534 - val_loss: 14.7706 - val_accuracy: 0.0314\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras import models\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras import optimizers\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "lr_schedule = keras.optimizers.schedules.ExponentialDecay(\n",
    "    initial_learning_rate = 0.05,\n",
    "    decay_steps=2000,\n",
    "    decay_rate=0.95,\n",
    "    staircase=True)\n",
    "\n",
    "cnn = models.Sequential([\n",
    "    layers.Conv1D(filters = 64, kernel_size = 12, activation='relu', input_shape=(53, 1)),\n",
    "    layers.Conv1D(filters = 32, kernel_size = 7, activation='relu'),\n",
    "    layers.MaxPooling1D(1),\n",
    "    layers.Flatten(),\n",
    "    layers.Dense(1024, activation='relu'),\n",
    "    layers.Dense(10)\n",
    "])\n",
    "\n",
    "cnn.summary()\n",
    "\n",
    "#refer to https://www.tensorflow.org/tutorials/keras/classification tutorial to check on how to use compile function\n",
    "cnn.compile(optimizer=keras.optimizers.Adam(lr_schedule), loss=tf.keras.losses.BinaryCrossentropy(), metrics=['accuracy'])\n",
    "\n",
    "# This will start the training and save each epoch output in the history list.\n",
    "history_cnn = cnn.fit(normalize_syn_x, syn_y_train, batch_size=512, epochs=10 , validation_data=(xval, y_valid))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 7921029,
     "sourceId": 50160,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30646,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 174.299336,
   "end_time": "2024-04-25T15:00:52.717054",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-25T14:57:58.417718",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
