{"metadata":{"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":50160,"databundleVersionId":7921029,"sourceType":"competition"}],"dockerImageVersionId":30646,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":604.816764,"end_time":"2024-03-21T13:19:27.943484","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-03-21T13:09:23.12672","version":"2.5.0"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import polars as pl\nimport numpy as np\nimport pandas as pd\nimport lightgbm as lgb\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OrdinalEncoder,LabelEncoder\nfrom sklearn.metrics import roc_auc_score \nfrom sklearn.utils import shuffle\nimport warnings\nfrom sklearn.model_selection import GroupKFold, StratifiedGroupKFold\nfrom sklearn.base import BaseEstimator, RegressorMixin\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.feature_extraction import FeatureHasher\nfrom tensorflow import keras\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.datasets import cifar10\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras import optimizers\n\n\ndataPath = \"/kaggle/input/home-credit-credit-risk-model-stability/\"","metadata":{"_kg_hide-input":false,"papermill":{"duration":4.273401,"end_time":"2024-03-21T13:09:30.582633","exception":false,"start_time":"2024-03-21T13:09:26.309232","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-04-30T19:17:23.530373Z","iopub.execute_input":"2024-04-30T19:17:23.530764Z","iopub.status.idle":"2024-04-30T19:17:23.538811Z","shell.execute_reply.started":"2024-04-30T19:17:23.530732Z","shell.execute_reply":"2024-04-30T19:17:23.537786Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"markdown","source":"## Load Dataset\n\nThis is given code used to load in the data frome kaggle.","metadata":{}},{"cell_type":"code","source":"def set_table_dtypes(df: pl.DataFrame) -> pl.DataFrame:\n    # implement here all desired dtypes for tables\n    # the following is just an example\n    for col in df.columns:\n        # last letter of column name will help you determine the type\n        if col[-1] in (\"P\", \"A\"):\n                df = df.with_columns(pl.col(col).cast(pl.Float64))\n    return df\n\ndef convert_strings(df: pd.DataFrame) -> pd.DataFrame: \n    for col in df.columns:  \n        if df[col].dtype.name in ['object', 'string']:\n            df[col] = df[col].astype(\"string\").astype('category')\n            current_categories = df[col].cat.categories\n            new_categories = current_categories.to_list() + [\"Unknown\"]\n            new_dtype = pd.CategoricalDtype(categories=new_categories, ordered=True)\n            df[col] = df[col].astype(new_dtype)\n    return df\n\n#https://www.kaggle.com/code/darynarr/home-credit-drop-date-features/notebook\ndef reduce_memory_usage_pl(df):\n        \"\"\" Reduce memory usage by polars dataframe {df} with name {name} by changing its data types.\n            Original pandas version of this function: https://www.kaggle.com/code/arjanso/reducing-dataframe-memory-size-by-65 \"\"\"\n        print(f\"Memory usage of dataframe is {round(df.estimated_size('mb'), 2)} MB\")\n        Numeric_Int_types = [pl.Int8,pl.Int16,pl.Int32,pl.Int64]\n        Numeric_Float_types = [pl.Float32,pl.Float64]    \n        for col in df.columns:\n            try:\n                col_type = df[col].dtype\n                if col_type == pl.Categorical:\n                    continue\n                c_min = df[col].min()\n                c_max = df[col].max()\n                if col_type in Numeric_Int_types:\n                    if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                        df = df.with_columns(df[col].cast(pl.Int32))\n                    elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                        df = df.with_columns(df[col].cast(pl.Int16))\n                    elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                        df = df.with_columns(df[col].cast(pl.Int32))\n                    elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                        df = df.with_columns(df[col].cast(pl.Int64))\n                elif col_type in Numeric_Float_types:\n                    if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                        df = df.with_columns(df[col].cast(pl.Float32))\n                    else:\n                        pass\n                # elif col_type == pl.Utf8:\n                #     df = df.with_columns(df[col].cast(pl.Categorical))\n                else:\n                    pass\n            except:\n                pass\n        print(f\"Memory usage of dataframe became {round(df.estimated_size('mb'), 2)} MB\")\n        return df","metadata":{"papermill":{"duration":0.028347,"end_time":"2024-03-21T13:09:30.616411","exception":false,"start_time":"2024-03-21T13:09:30.588064","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-04-30T19:01:10.199730Z","iopub.execute_input":"2024-04-30T19:01:10.200419Z","iopub.status.idle":"2024-04-30T19:01:10.216682Z","shell.execute_reply.started":"2024-04-30T19:01:10.200390Z","shell.execute_reply":"2024-04-30T19:01:10.215619Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"train_basetable = pl.read_csv(dataPath+'csv_files/train/train_base.csv').pipe(set_table_dtypes)\n\ntrain_static = pl.concat(\n[pl.read_csv(dataPath + \"csv_files/train/train_static_0_0.csv\").pipe(set_table_dtypes),\npl.read_csv(dataPath + \"csv_files/train/train_static_0_1.csv\").pipe(set_table_dtypes)\n],how = 'vertical_relaxed',\n)\n\ntrain_applprev = pl.concat(\n[pl.read_csv(dataPath + \"csv_files/train/train_applprev_1_0.csv\").pipe(set_table_dtypes),\npl.read_csv(dataPath + \"csv_files/train/train_applprev_1_1.csv\").pipe(set_table_dtypes)   \n],how = 'vertical_relaxed',\n)\n\ntrain_static_cb = pl.read_csv(dataPath + \"csv_files/train/train_static_cb_0.csv\").pipe(set_table_dtypes)\ntrain_person_1 = pl.read_csv(dataPath + \"csv_files/train/train_person_1.csv\").pipe(set_table_dtypes)\ntrain_credit_bureau_a_2_5 = pl.read_csv(dataPath + \"csv_files/train/train_credit_bureau_a_2_5.csv\").pipe(set_table_dtypes)\ntrain_deposit_1 = pl.read_csv(dataPath + \"csv_files/train/train_deposit_1.csv\").pipe(set_table_dtypes)\n","metadata":{"_kg_hide-input":true,"papermill":{"duration":45.036287,"end_time":"2024-03-21T13:10:15.657778","exception":false,"start_time":"2024-03-21T13:09:30.621491","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-04-30T19:01:10.217799Z","iopub.execute_input":"2024-04-30T19:01:10.218184Z","iopub.status.idle":"2024-04-30T19:01:45.400138Z","shell.execute_reply.started":"2024-04-30T19:01:10.218147Z","shell.execute_reply":"2024-04-30T19:01:45.399176Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"test_basetable = pl.read_csv(dataPath+'csv_files/test/test_base.csv').pipe(set_table_dtypes)\n\ntest_static = pl.concat(\n[pl.read_csv(dataPath + \"csv_files/test/test_static_0_0.csv\").pipe(set_table_dtypes),\npl.read_csv(dataPath + \"csv_files/test/test_static_0_1.csv\").pipe(set_table_dtypes)\n],how = 'vertical_relaxed',\n)\ntest_applprev = pl.concat(\n[       pl.read_csv(dataPath + \"csv_files/test/test_applprev_1_0.csv\").pipe(set_table_dtypes),\n        pl.read_csv(dataPath + \"csv_files/test/test_applprev_1_1.csv\").pipe(set_table_dtypes),    \n],how = 'vertical_relaxed',\n)\n\ntest_static_cb = pl.read_csv(dataPath + \"csv_files/test/test_static_cb_0.csv\").pipe(set_table_dtypes)\ntest_person_1 = pl.read_csv(dataPath + \"csv_files/test/test_person_1.csv\").pipe(set_table_dtypes)\ntest_credit_bureau_a_2_5 = pl.read_csv(dataPath + \"csv_files/test/test_credit_bureau_a_2_5.csv\").pipe(set_table_dtypes)\ntest_deposit_1 = pl.read_csv(dataPath + \"csv_files/test/test_deposit_1.csv\").pipe(set_table_dtypes)","metadata":{"papermill":{"duration":0.097894,"end_time":"2024-03-21T13:10:15.761027","exception":false,"start_time":"2024-03-21T13:10:15.663133","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-04-30T19:01:45.402609Z","iopub.execute_input":"2024-04-30T19:01:45.402962Z","iopub.status.idle":"2024-04-30T19:01:45.471216Z","shell.execute_reply.started":"2024-04-30T19:01:45.402929Z","shell.execute_reply":"2024-04-30T19:01:45.470512Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"class FeatureEngineer:\n    def __init__(self, train_basetable, train_static, train_static_cb,\n                 train_person_1, train_credit_bureau_a_2_5,train_deposit_1,train_applprev):\n        \n        self.train_basetable = train_basetable\n        self.train_static = train_static\n        self.train_static_cb = train_static_cb\n        self.train_person_1 = train_person_1\n        self.train_credit_bureau_a_2_5 = train_credit_bureau_a_2_5\n        self.train_deposit_1 = train_deposit_1\n        self.train_applprev = train_applprev\n        \n        \n    def generate_person_features(self):\n        # Aggregating features from train_person_1\n        train_person_1_feats_1 = self.train_person_1.group_by(\"case_id\").agg(\n            pl.col(\"mainoccupationinc_384A\").max().alias(\"mainoccupationinc_384A_maxA\"),\n            (pl.col(\"incometype_1044T\") == \"SELFEMPLOYED\").max().alias(\"mainoccupationinc_384A_any_selfemployedA\"),\n            pl.col(\"childnum_185L\").sum().alias(\"total_childrenL\").cast(pl.Int32)\n        )\n        \n        # Filtering and selecting features from train_person_1\n        train_person_1_feats_2 = self.train_person_1.select([\"case_id\", \"num_group1\", \"housetype_905L\"]).filter(\n            pl.col(\"num_group1\") == 0).drop(\"num_group1\").rename({\"housetype_905L\": \"person_housetypeL\"})\n        \n        \n        return train_person_1_feats_1, train_person_1_feats_2\n    \n    \n    def deposit_frequency(self):\n        deposit_frequency = self.train_deposit_1.group_by(\"case_id\").agg(\n        pl.count(\"amount_416A\").alias(\"deposit_countL\")\n    )   \n        return deposit_frequency\n    \n    \n    def generate_applprev(self):\n         # Total Payment Amount\n            total_payment_amount = self.train_applprev.group_by(\"case_id\").agg(\n                pl.col(\"pmtnum_8L\").sum().alias(\"total_payment_amountL\"))\n            \n            # average Annuity\n            avg_annuity = self.train_applprev.group_by(\"case_id\").agg(\n                pl.col(\"annuity_853A\").mean().alias(\"avg_annuityA\"))\n\n            \n            #payment_rate = self.train_applprev.with_columns(\n                #(pl.col(\"annuity_853A\")/pl.col(\"credamount_590A\")).alias(\"payment_rateL\"))\n\n            return total_payment_amount,avg_annuity #payment_rate\n\n           \n    \n    def generate_static_columns(self, df):\n        selected_static_cols = [col for col in df.columns if col[-1] in (\"A\", \"M\")]\n        return df.select([\"case_id\"] + selected_static_cols) \n     \n \n        # Generating features\n    def join_tables(self):\n        person_feats_1, person_feats_2 = self.generate_person_features()\n        deposit_frequency = self.deposit_frequency()\n        total_payment_amount,avg_annuity = self.generate_applprev()\n         \n        # Selecting static columns\n        selected_static = self.generate_static_columns(self.train_static)\n        selected_static_cb = self.generate_static_columns(self.train_static_cb)\n        \n        #joining data\n        data = self.train_basetable.join(selected_static, how=\"left\", on=\"case_id\") \\\n                                   .join(selected_static_cb, how=\"left\", on=\"case_id\") \\\n                                   .join(person_feats_1, how=\"left\", on=\"case_id\") \\\n                                   .join(person_feats_2, how=\"left\", on=\"case_id\") \\\n                                   .join(deposit_frequency, how=\"left\", on=\"case_id\") \\\n                                   .join(total_payment_amount, how=\"left\", on=\"case_id\") \\\n                                   .join(avg_annuity, how=\"left\", on=\"case_id\") \n\n                                   #.join(payment_rate, how=\"left\", on=\"case_id\") \n\n        data = data.with_columns(\n            pl.col(pl.Float64).cast(pl.Float32)\n        )\n        \n        \n        return data\n    \n            \n       # Generate and join features for the test set\n    def process_test_set(self, test_basetable, test_static, test_static_cb, test_person_1, test_credit_bureau_a_2_5, test_deposit_1,test_applprev):\n        fe_test = FeatureEngineer(test_basetable, test_static, test_static_cb, test_person_1, test_credit_bureau_a_2_5, test_deposit_1,test_applprev)\n        \n        test_data = fe_test.join_tables()\n\n\n        return test_data\n    \n\nfe = FeatureEngineer(train_basetable, train_static, train_static_cb, train_person_1,\n                     train_credit_bureau_a_2_5,train_deposit_1,train_applprev)\n\ndata = fe.join_tables()\ndata = reduce_memory_usage_pl(data)\n\n\ntest_data = fe.process_test_set(test_basetable, test_static, test_static_cb,\n                                test_person_1, test_credit_bureau_a_2_5, test_deposit_1,test_applprev)\n\ntest_data = reduce_memory_usage_pl(test_data)","metadata":{"papermill":{"duration":4.482152,"end_time":"2024-03-21T13:10:20.248373","exception":false,"start_time":"2024-03-21T13:10:15.766221","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-04-30T19:01:45.472474Z","iopub.execute_input":"2024-04-30T19:01:45.472748Z","iopub.status.idle":"2024-04-30T19:01:49.213399Z","shell.execute_reply.started":"2024-04-30T19:01:45.472725Z","shell.execute_reply":"2024-04-30T19:01:49.212366Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Memory usage of dataframe is 635.99 MB\nMemory usage of dataframe became 612.69 MB\nMemory usage of dataframe is 0.0 MB\nMemory usage of dataframe became 0.0 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"case_ids = data[\"case_id\"].unique().shuffle(seed=1)\ncase_ids_train, case_ids_test = train_test_split(case_ids, train_size=0.6, random_state=42)\ncase_ids_valid, case_ids_test = train_test_split(case_ids_test, train_size=0.5, random_state=42)\n\ncols_pred = []\nfor col in data.columns:\n    if col[-1].isupper() and col[:-1].islower():\n        cols_pred.append(col)\n\n        \ndef from_polars_to_pandas(case_ids: pl.DataFrame) -> pl.DataFrame:\n    return (\n        data.filter(pl.col(\"case_id\").is_in(case_ids))[[\"case_id\", \"WEEK_NUM\", \"target\"]].to_pandas(),\n        data.filter(pl.col(\"case_id\").is_in(case_ids))[cols_pred].to_pandas(),\n        data.filter(pl.col(\"case_id\").is_in(case_ids))[\"target\"].to_pandas()\n    )\n\nbase_train, X_train, y_train = from_polars_to_pandas(case_ids_train)\nbase_valid, X_valid, y_valid = from_polars_to_pandas(case_ids_valid)\nbase_test, X_test, y_test = from_polars_to_pandas(case_ids_test)\n\n","metadata":{"_kg_hide-output":false,"papermill":{"duration":9.118823,"end_time":"2024-03-21T13:10:29.372353","exception":false,"start_time":"2024-03-21T13:10:20.25353","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-04-30T19:01:49.214438Z","iopub.execute_input":"2024-04-30T19:01:49.214710Z","iopub.status.idle":"2024-04-30T19:01:51.922869Z","shell.execute_reply.started":"2024-04-30T19:01:49.214687Z","shell.execute_reply":"2024-04-30T19:01:51.921905Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"def col_hasher(df: pd.DataFrame, cols: [str]) -> pd.DataFrame:\n    \"\"\"\n    Hashes a list of dataframe columns, modifies pandas chained_assignment warning to suppress false positives\n    \n    @params:\n        df:  Pandas DataFrame, REQUIRED\n        cols: List of strings representing the columns in the dataframe\n        \n    @returns:\n        df: Pandas DataFrame with hashed columns\n    \"\"\"\n    \n    pd.options.mode.chained_assignment = None\n    for col in cols:\n        hashed = pd.util.hash_array(np.array(df[col]))\n        df[col] = hashed\n        \n    pd.reset_option(\"mode.chained_assignment\")\n    return df\n\n\ndef gen_synthetic(x_data: pd.DataFrame, n: int, y_data: pd.Series, syn_type: int):\n    \"\"\"\n    x: X_train\n    n: number of entries to generate\n    y: y_train\n    syn_type: class to generate, either 0 or 1\n    \"\"\"\n    \n    \n    x_data = x_data.assign(target=y_data.values)\n    x_data = x_data[x_data['target'] == syn_type]\n    x_data = x_data.drop('target', axis = 1)\n    \n    syn_y = []\n\n    syn_data = {}\n    for col in x_data.columns.to_list():\n        syn_data[col] = []\n        data = x_data[col].value_counts().index.to_list()\n        marginal = list(marginals(x_data, col).values())\n        synthetic = np.random.choice(data, size=n, p=marginal)\n        \n        for syn_data_point in synthetic:\n            syn_data[col].append(syn_data_point)\n    \n    for i in range(n):\n        syn_y.append(1)\n        \n    syn_x = pd.DataFrame.from_dict(syn_data)\n    syn_y = pd.Series(syn_y)\n    return syn_x, syn_y\n\ndef marginals(df: pd.DataFrame, col: str) -> {}:\n    \"\"\"\n    maps the probabilty of an occurence to the occurence\n    \"\"\"\n    data = df[col].value_counts()\n    results = [x for x in data]\n    labels = df[col].value_counts().index.to_list()\n    syn_rep = {}\n    \n    for x in range(len(labels)):\n        syn_rep[labels[x]] = max(0, results[x])\n    \n    total = sum(syn_rep.values())\n    \n    marginal = {}\n    for x in labels:\n        marginal[x] = syn_rep[x] / total\n    return marginal","metadata":{"execution":{"iopub.status.busy":"2024-04-30T19:01:51.924592Z","iopub.execute_input":"2024-04-30T19:01:51.924951Z","iopub.status.idle":"2024-04-30T19:01:51.938499Z","shell.execute_reply.started":"2024-04-30T19:01:51.924919Z","shell.execute_reply":"2024-04-30T19:01:51.937561Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"## Establish Categorical Columns","metadata":{}},{"cell_type":"code","source":"X_train","metadata":{"execution":{"iopub.status.busy":"2024-04-30T19:01:51.939462Z","iopub.execute_input":"2024-04-30T19:01:51.939701Z","iopub.status.idle":"2024-04-30T19:01:52.194501Z","shell.execute_reply.started":"2024-04-30T19:01:51.939680Z","shell.execute_reply":"2024-04-30T19:01:52.193604Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"        amtinstpaidbefduel24m_4187115A  annuity_780A  annuitynextmonth_57A  \\\n0                                  NaN   1917.599976              0.000000   \n1                                  NaN   3134.000000              0.000000   \n2                                  NaN   4937.000000              0.000000   \n3                                  NaN   3390.199951              0.000000   \n4                                  NaN   3600.000000              0.000000   \n...                                ...           ...                   ...   \n915990                    75052.203125   4625.000000           7054.200195   \n915991                   117572.601562   8016.000000              0.000000   \n915992                   104557.250000   8218.000000           5293.200195   \n915993                   176561.359375   3675.400146              0.000000   \n915994                   301276.468750   7088.600098           6191.600098   \n\n        avginstallast24m_3658937A  avglnamtstart24m_4525187A  \\\n0                             NaN                        NaN   \n1                             NaN                        NaN   \n2                             NaN                        NaN   \n3                             NaN                        NaN   \n4                             NaN                        NaN   \n...                           ...                        ...   \n915990                4265.399902                    44798.0   \n915991                6916.000000                        NaN   \n915992                8027.200195                        NaN   \n915993                7356.800293                        NaN   \n915994               12553.200195                        NaN   \n\n        avgoutstandbalancel6m_4187114A  avgpmtlast12m_4525200A  \\\n0                                  NaN                     NaN   \n1                                  NaN                     NaN   \n2                                  NaN                     NaN   \n3                                  NaN                     NaN   \n4                                  NaN                     NaN   \n...                                ...                     ...   \n915990                    64509.531250             4110.000000   \n915991                             NaN             7340.000000   \n915992                    23399.828125             5293.200195   \n915993                    16392.496094             6750.200195   \n915994                   105129.312500            15780.400391   \n\n        credamount_770A  currdebt_22A  currdebtcredtyperange_828A  ...  \\\n0          30000.000000      0.000000                    0.000000  ...   \n1          19999.800781      0.000000                    0.000000  ...   \n2          78000.000000      0.000000                    0.000000  ...   \n3          44000.000000      0.000000                    0.000000  ...   \n4          60000.000000      0.000000                    0.000000  ...   \n...                 ...           ...                         ...  ...   \n915990     60000.000000  68908.804688                    0.000000  ...   \n915991    200000.000000      0.000000                    0.000000  ...   \n915992    132000.000000  10548.400391                10548.400391  ...   \n915993     30000.000000      0.000000                    0.000000  ...   \n915994    100000.000000  68098.398438                68098.398438  ...   \n\n        maritalst_893M  pmtaverage_3A  pmtaverage_4527227A  \\\n0                 None            NaN                  NaN   \n1                 None            NaN                  NaN   \n2                 None            NaN                  NaN   \n3                 None            NaN                  NaN   \n4                 None            NaN                  NaN   \n...                ...            ...                  ...   \n915990        a55475b1            NaN                  NaN   \n915991        a55475b1            NaN                  NaN   \n915992        a55475b1            NaN                  NaN   \n915993        a55475b1            NaN                  NaN   \n915994        a55475b1            NaN                  NaN   \n\n       pmtaverage_4955615A pmtssum_45A  total_childrenL person_housetypeL  \\\n0                      NaN         NaN                0              None   \n1                      NaN         NaN                0              None   \n2                      NaN         NaN                0              None   \n3                      NaN         NaN                0              None   \n4                      NaN         NaN                0              None   \n...                    ...         ...              ...               ...   \n915990        13506.600586         NaN                0             OWNED   \n915991                 NaN         NaN                0             OWNED   \n915992                 NaN         NaN                0              None   \n915993        12155.000000         NaN                0             OWNED   \n915994        22904.599609         NaN                0              None   \n\n        deposit_countL  total_payment_amountL avg_annuityA  \n0                  NaN                    NaN          NaN  \n1                  NaN                    NaN          NaN  \n2                  NaN                   36.0  1161.300049  \n3                  NaN                   24.0  2556.600098  \n4                  NaN                    0.0          NaN  \n...                ...                    ...          ...  \n915990             NaN                   57.0  3803.640137  \n915991             NaN                   67.0  4141.399902  \n915992             NaN                  100.0  3742.314453  \n915993             NaN                  131.0  4890.250000  \n915994             NaN                   90.0  6472.866699  \n\n[915995 rows x 53 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>amtinstpaidbefduel24m_4187115A</th>\n      <th>annuity_780A</th>\n      <th>annuitynextmonth_57A</th>\n      <th>avginstallast24m_3658937A</th>\n      <th>avglnamtstart24m_4525187A</th>\n      <th>avgoutstandbalancel6m_4187114A</th>\n      <th>avgpmtlast12m_4525200A</th>\n      <th>credamount_770A</th>\n      <th>currdebt_22A</th>\n      <th>currdebtcredtyperange_828A</th>\n      <th>...</th>\n      <th>maritalst_893M</th>\n      <th>pmtaverage_3A</th>\n      <th>pmtaverage_4527227A</th>\n      <th>pmtaverage_4955615A</th>\n      <th>pmtssum_45A</th>\n      <th>total_childrenL</th>\n      <th>person_housetypeL</th>\n      <th>deposit_countL</th>\n      <th>total_payment_amountL</th>\n      <th>avg_annuityA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaN</td>\n      <td>1917.599976</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>30000.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>3134.000000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>19999.800781</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>4937.000000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>78000.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>36.0</td>\n      <td>1161.300049</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>3390.199951</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>44000.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>24.0</td>\n      <td>2556.600098</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>3600.000000</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>60000.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>915990</th>\n      <td>75052.203125</td>\n      <td>4625.000000</td>\n      <td>7054.200195</td>\n      <td>4265.399902</td>\n      <td>44798.0</td>\n      <td>64509.531250</td>\n      <td>4110.000000</td>\n      <td>60000.000000</td>\n      <td>68908.804688</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>13506.600586</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>OWNED</td>\n      <td>NaN</td>\n      <td>57.0</td>\n      <td>3803.640137</td>\n    </tr>\n    <tr>\n      <th>915991</th>\n      <td>117572.601562</td>\n      <td>8016.000000</td>\n      <td>0.000000</td>\n      <td>6916.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>7340.000000</td>\n      <td>200000.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>OWNED</td>\n      <td>NaN</td>\n      <td>67.0</td>\n      <td>4141.399902</td>\n    </tr>\n    <tr>\n      <th>915992</th>\n      <td>104557.250000</td>\n      <td>8218.000000</td>\n      <td>5293.200195</td>\n      <td>8027.200195</td>\n      <td>NaN</td>\n      <td>23399.828125</td>\n      <td>5293.200195</td>\n      <td>132000.000000</td>\n      <td>10548.400391</td>\n      <td>10548.400391</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>100.0</td>\n      <td>3742.314453</td>\n    </tr>\n    <tr>\n      <th>915993</th>\n      <td>176561.359375</td>\n      <td>3675.400146</td>\n      <td>0.000000</td>\n      <td>7356.800293</td>\n      <td>NaN</td>\n      <td>16392.496094</td>\n      <td>6750.200195</td>\n      <td>30000.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12155.000000</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>OWNED</td>\n      <td>NaN</td>\n      <td>131.0</td>\n      <td>4890.250000</td>\n    </tr>\n    <tr>\n      <th>915994</th>\n      <td>301276.468750</td>\n      <td>7088.600098</td>\n      <td>6191.600098</td>\n      <td>12553.200195</td>\n      <td>NaN</td>\n      <td>105129.312500</td>\n      <td>15780.400391</td>\n      <td>100000.000000</td>\n      <td>68098.398438</td>\n      <td>68098.398438</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>22904.599609</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>90.0</td>\n      <td>6472.866699</td>\n    </tr>\n  </tbody>\n</table>\n<p>915995 rows × 53 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"index = X_train.dtypes.index.to_list()\n\ncategoricals = {}\n\nfor i in range(len(X_train.dtypes)):\n    \n    if X_train.dtypes.iloc[i] == \"float32\" or X_train.dtypes.iloc[i] == \"float64\" or X_train.dtypes.iloc[i] == \"int32\":\n        continue\n    else:\n        categoricals[index[i]] = str(X_train.dtypes.iloc[i])\n        \n        data = X_train[index[i]].value_counts().index.to_list()\n        \n        X_train = X_train.assign(**{index[i]:X_train[index[i]].fillna(data[0])})\n        \ncategoricals","metadata":{"execution":{"iopub.status.busy":"2024-04-30T19:20:01.743944Z","iopub.execute_input":"2024-04-30T19:20:01.744305Z","iopub.status.idle":"2024-04-30T19:20:10.007663Z","shell.execute_reply.started":"2024-04-30T19:20:01.744276Z","shell.execute_reply":"2024-04-30T19:20:10.006745Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"{'lastapprcommoditycat_1041M': 'string',\n 'lastapprcommoditytypec_5251766M': 'string',\n 'lastcancelreason_561M': 'string',\n 'lastrejectcommoditycat_161M': 'string',\n 'lastrejectcommodtypec_5251769M': 'string',\n 'lastrejectreason_759M': 'string',\n 'lastrejectreasonclient_4145040M': 'string',\n 'previouscontdistrict_112M': 'string',\n 'description_5085714M': 'string',\n 'education_1103M': 'string',\n 'education_88M': 'string',\n 'maritalst_385M': 'string',\n 'maritalst_893M': 'string',\n 'person_housetypeL': 'string'}"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f\"X_train:{X_train.shape}\")\nprint(f\"Valid: {X_valid.shape}\")\nprint(f\"Test: {X_test.shape}\")","metadata":{"papermill":{"duration":0.015898,"end_time":"2024-03-21T13:10:29.393533","exception":false,"start_time":"2024-03-21T13:10:29.377635","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-04-30T19:02:03.104878Z","iopub.execute_input":"2024-04-30T19:02:03.105288Z","iopub.status.idle":"2024-04-30T19:02:03.110744Z","shell.execute_reply.started":"2024-04-30T19:02:03.105258Z","shell.execute_reply":"2024-04-30T19:02:03.109534Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"X_train:(915995, 53)\nValid: (305332, 53)\nTest: (305332, 53)\n","output_type":"stream"}]},{"cell_type":"code","source":"for col in X_train.columns:\n    if X_train[col].isna().sum() > 0:\n        X_train = X_train.assign(**{col:X_train[col].fillna(X_train[col].mean())})","metadata":{"execution":{"iopub.status.busy":"2024-04-30T19:02:03.112078Z","iopub.execute_input":"2024-04-30T19:02:03.112844Z","iopub.status.idle":"2024-04-30T19:02:14.997346Z","shell.execute_reply.started":"2024-04-30T19:02:03.112810Z","shell.execute_reply":"2024-04-30T19:02:14.996299Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"syn_x, syn_y = gen_synthetic(x_data = X_train, n = int(len(X_train) / 10), y_data = y_train, syn_type = 1)\n\nsyn_X_train = pd.concat([syn_x, X_train.head(int(len(X_train) / 10))])\nsyn_y_train = pd.concat([syn_y, y_train.head(int(len(y_train) / 10))])","metadata":{"execution":{"iopub.status.busy":"2024-04-30T19:02:14.998756Z","iopub.execute_input":"2024-04-30T19:02:14.999120Z","iopub.status.idle":"2024-04-30T19:02:19.597756Z","shell.execute_reply.started":"2024-04-30T19:02:14.999086Z","shell.execute_reply":"2024-04-30T19:02:19.596754Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"# Merge and shuffle data\nsyn_X_train['target'] = syn_y_train\nsyn_X_train = syn_X_train.sample(frac = 1)\n\nsyn_y_train = syn_X_train['target']\nsyn_X_train = syn_X_train.drop('target', axis = 1)\nsyn_X_train","metadata":{"execution":{"iopub.status.busy":"2024-04-30T19:02:19.599008Z","iopub.execute_input":"2024-04-30T19:02:19.599334Z","iopub.status.idle":"2024-04-30T19:02:19.969395Z","shell.execute_reply.started":"2024-04-30T19:02:19.599309Z","shell.execute_reply":"2024-04-30T19:02:19.968378Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"       amtinstpaidbefduel24m_4187115A  annuity_780A  annuitynextmonth_57A  \\\n58588                    16061.000000   9342.000000              0.000000   \n2788                     56012.082031   4456.399902              0.000000   \n56977                    27836.201172   6048.399902              0.000000   \n21339                    56012.082031  13105.400391              0.000000   \n61746                    81808.000000   2714.800049           5896.000000   \n...                               ...           ...                   ...   \n41215                    56012.082031   5111.600098              0.000000   \n31886                        0.000000   8281.600586           3947.199951   \n54430                     4623.000000   1715.599976              0.000000   \n63454                    56012.082031   9291.200195              0.000000   \n36673                    56012.082031   7200.000000              0.000000   \n\n       avginstallast24m_3658937A  avglnamtstart24m_4525187A  \\\n58588                5408.019531               44656.457031   \n2788                 5408.019531               44656.457031   \n56977                2530.600098               44656.457031   \n21339                5408.019531               44656.457031   \n61746                5232.800293               44656.457031   \n...                          ...                        ...   \n41215                2706.400146               44656.457031   \n31886                4308.200195               44656.457031   \n54430                3283.800049               44656.457031   \n63454                1137.200073               44656.457031   \n36673                4497.600098               24726.000000   \n\n       avgoutstandbalancel6m_4187114A  avgpmtlast12m_4525200A  \\\n58588                    46039.816406             6416.095215   \n2788                     46039.816406             6416.095215   \n56977                     3785.000000             6416.095215   \n21339                    46039.816406             6416.095215   \n61746                   201343.734375             6416.095215   \n...                               ...                     ...   \n41215                    46039.816406             6416.095215   \n31886                    56003.730469             6416.095215   \n54430                    46039.816406             6416.095215   \n63454                    46039.816406             3852.000000   \n36673                    46039.816406             6416.095215   \n\n       credamount_770A   currdebt_22A  currdebtcredtyperange_828A  ...  \\\n58588          27428.0       0.000000                     0.00000  ...   \n2788           74000.0       0.000000                     0.00000  ...   \n56977         100000.0       0.000000                     0.00000  ...   \n21339         140000.0       0.000000                     0.00000  ...   \n61746          60000.0  182534.406250                182534.40625  ...   \n...                ...            ...                         ...  ...   \n41215          64000.0       0.000000                     0.00000  ...   \n31886         161596.0       0.000000                 28276.00000  ...   \n54430          21498.0   38728.175781                     0.00000  ...   \n63454          21000.0       0.000000                     0.00000  ...   \n36673          25196.0       0.000000                     0.00000  ...   \n\n       maritalst_893M  pmtaverage_3A  pmtaverage_4527227A pmtaverage_4955615A  \\\n58588        a55475b1    9292.367188         10036.295898        17618.447266   \n2788         a55475b1    9292.367188         10036.295898        17618.447266   \n56977        a55475b1    9292.367188         10036.295898        17618.447266   \n21339        a55475b1    9292.367188         10036.295898        17618.447266   \n61746        a55475b1    9292.367188         10036.295898        17618.447266   \n...               ...            ...                  ...                 ...   \n41215        a55475b1    9292.367188         10036.295898        17618.447266   \n31886        a55475b1    9292.367188         10036.295898        17618.447266   \n54430        a55475b1    9292.367188         10036.295898        17618.447266   \n63454        a55475b1    9292.367188         10036.295898        17618.447266   \n36673        a55475b1    9292.367188         10036.295898        17618.447266   \n\n        pmtssum_45A  total_childrenL person_housetypeL  deposit_countL  \\\n58588  13224.186523                0             OWNED        1.379098   \n2788   16108.600586                0             OWNED        1.379098   \n56977  13224.186523                0             OWNED        1.000000   \n21339  13224.186523                0             OWNED        1.379098   \n61746  16552.599609                0             OWNED        1.379098   \n...             ...              ...               ...             ...   \n41215   3761.000000                0             OWNED        1.379098   \n31886  13224.186523                0             OWNED        1.379098   \n54430  13224.186523                0             OWNED        1.379098   \n63454  13224.186523                0             OWNED        1.379098   \n36673  13023.238281                0             OWNED        1.379098   \n\n       total_payment_amountL  avg_annuityA  \n58588             194.000000   1697.800049  \n2788               79.379036   3379.669922  \n56977             156.000000   2106.399902  \n21339               9.000000  12156.200195  \n61746             150.000000   3467.171387  \n...                      ...           ...  \n41215              30.000000   1919.133423  \n31886              79.379036   1852.430786  \n54430             142.000000   4232.600098  \n63454             162.000000   1033.800049  \n36673              79.379036   1381.314331  \n\n[183198 rows x 53 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>amtinstpaidbefduel24m_4187115A</th>\n      <th>annuity_780A</th>\n      <th>annuitynextmonth_57A</th>\n      <th>avginstallast24m_3658937A</th>\n      <th>avglnamtstart24m_4525187A</th>\n      <th>avgoutstandbalancel6m_4187114A</th>\n      <th>avgpmtlast12m_4525200A</th>\n      <th>credamount_770A</th>\n      <th>currdebt_22A</th>\n      <th>currdebtcredtyperange_828A</th>\n      <th>...</th>\n      <th>maritalst_893M</th>\n      <th>pmtaverage_3A</th>\n      <th>pmtaverage_4527227A</th>\n      <th>pmtaverage_4955615A</th>\n      <th>pmtssum_45A</th>\n      <th>total_childrenL</th>\n      <th>person_housetypeL</th>\n      <th>deposit_countL</th>\n      <th>total_payment_amountL</th>\n      <th>avg_annuityA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>58588</th>\n      <td>16061.000000</td>\n      <td>9342.000000</td>\n      <td>0.000000</td>\n      <td>5408.019531</td>\n      <td>44656.457031</td>\n      <td>46039.816406</td>\n      <td>6416.095215</td>\n      <td>27428.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13224.186523</td>\n      <td>0</td>\n      <td>OWNED</td>\n      <td>1.379098</td>\n      <td>194.000000</td>\n      <td>1697.800049</td>\n    </tr>\n    <tr>\n      <th>2788</th>\n      <td>56012.082031</td>\n      <td>4456.399902</td>\n      <td>0.000000</td>\n      <td>5408.019531</td>\n      <td>44656.457031</td>\n      <td>46039.816406</td>\n      <td>6416.095215</td>\n      <td>74000.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>16108.600586</td>\n      <td>0</td>\n      <td>OWNED</td>\n      <td>1.379098</td>\n      <td>79.379036</td>\n      <td>3379.669922</td>\n    </tr>\n    <tr>\n      <th>56977</th>\n      <td>27836.201172</td>\n      <td>6048.399902</td>\n      <td>0.000000</td>\n      <td>2530.600098</td>\n      <td>44656.457031</td>\n      <td>3785.000000</td>\n      <td>6416.095215</td>\n      <td>100000.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13224.186523</td>\n      <td>0</td>\n      <td>OWNED</td>\n      <td>1.000000</td>\n      <td>156.000000</td>\n      <td>2106.399902</td>\n    </tr>\n    <tr>\n      <th>21339</th>\n      <td>56012.082031</td>\n      <td>13105.400391</td>\n      <td>0.000000</td>\n      <td>5408.019531</td>\n      <td>44656.457031</td>\n      <td>46039.816406</td>\n      <td>6416.095215</td>\n      <td>140000.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13224.186523</td>\n      <td>0</td>\n      <td>OWNED</td>\n      <td>1.379098</td>\n      <td>9.000000</td>\n      <td>12156.200195</td>\n    </tr>\n    <tr>\n      <th>61746</th>\n      <td>81808.000000</td>\n      <td>2714.800049</td>\n      <td>5896.000000</td>\n      <td>5232.800293</td>\n      <td>44656.457031</td>\n      <td>201343.734375</td>\n      <td>6416.095215</td>\n      <td>60000.0</td>\n      <td>182534.406250</td>\n      <td>182534.40625</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>16552.599609</td>\n      <td>0</td>\n      <td>OWNED</td>\n      <td>1.379098</td>\n      <td>150.000000</td>\n      <td>3467.171387</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>41215</th>\n      <td>56012.082031</td>\n      <td>5111.600098</td>\n      <td>0.000000</td>\n      <td>2706.400146</td>\n      <td>44656.457031</td>\n      <td>46039.816406</td>\n      <td>6416.095215</td>\n      <td>64000.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>3761.000000</td>\n      <td>0</td>\n      <td>OWNED</td>\n      <td>1.379098</td>\n      <td>30.000000</td>\n      <td>1919.133423</td>\n    </tr>\n    <tr>\n      <th>31886</th>\n      <td>0.000000</td>\n      <td>8281.600586</td>\n      <td>3947.199951</td>\n      <td>4308.200195</td>\n      <td>44656.457031</td>\n      <td>56003.730469</td>\n      <td>6416.095215</td>\n      <td>161596.0</td>\n      <td>0.000000</td>\n      <td>28276.00000</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13224.186523</td>\n      <td>0</td>\n      <td>OWNED</td>\n      <td>1.379098</td>\n      <td>79.379036</td>\n      <td>1852.430786</td>\n    </tr>\n    <tr>\n      <th>54430</th>\n      <td>4623.000000</td>\n      <td>1715.599976</td>\n      <td>0.000000</td>\n      <td>3283.800049</td>\n      <td>44656.457031</td>\n      <td>46039.816406</td>\n      <td>6416.095215</td>\n      <td>21498.0</td>\n      <td>38728.175781</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13224.186523</td>\n      <td>0</td>\n      <td>OWNED</td>\n      <td>1.379098</td>\n      <td>142.000000</td>\n      <td>4232.600098</td>\n    </tr>\n    <tr>\n      <th>63454</th>\n      <td>56012.082031</td>\n      <td>9291.200195</td>\n      <td>0.000000</td>\n      <td>1137.200073</td>\n      <td>44656.457031</td>\n      <td>46039.816406</td>\n      <td>3852.000000</td>\n      <td>21000.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13224.186523</td>\n      <td>0</td>\n      <td>OWNED</td>\n      <td>1.379098</td>\n      <td>162.000000</td>\n      <td>1033.800049</td>\n    </tr>\n    <tr>\n      <th>36673</th>\n      <td>56012.082031</td>\n      <td>7200.000000</td>\n      <td>0.000000</td>\n      <td>4497.600098</td>\n      <td>24726.000000</td>\n      <td>46039.816406</td>\n      <td>6416.095215</td>\n      <td>25196.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>a55475b1</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13023.238281</td>\n      <td>0</td>\n      <td>OWNED</td>\n      <td>1.379098</td>\n      <td>79.379036</td>\n      <td>1381.314331</td>\n    </tr>\n  </tbody>\n</table>\n<p>183198 rows × 53 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"float64_cols = list(syn_X_train.select_dtypes(include='float64'))\n\n# The same code again calling the columns\nsyn_X_train[float64_cols] = syn_X_train[float64_cols].astype('float32')","metadata":{"execution":{"iopub.status.busy":"2024-04-30T19:08:09.179939Z","iopub.execute_input":"2024-04-30T19:08:09.180661Z","iopub.status.idle":"2024-04-30T19:08:09.273554Z","shell.execute_reply.started":"2024-04-30T19:08:09.180629Z","shell.execute_reply":"2024-04-30T19:08:09.272734Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"# normalize_syn_x = syn_X_train.copy()\n  \n# # apply normalization techniques \n# for column in normalize_syn_x.columns: \n#     normalize_syn_x[column] = (normalize_syn_x[column] - normalize_syn_x[column].min()) / (normalize_syn_x[column].max() - normalize_syn_x[column].min())     \n  \n# normalize_syn_x","metadata":{"execution":{"iopub.status.busy":"2024-04-30T19:02:19.984829Z","iopub.execute_input":"2024-04-30T19:02:19.985153Z","iopub.status.idle":"2024-04-30T19:02:19.989632Z","shell.execute_reply.started":"2024-04-30T19:02:19.985124Z","shell.execute_reply":"2024-04-30T19:02:19.988597Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"## Different Training Sets\n- X_train: standard data\n- xtrain: standard data with NaN values filled with 0\n- syn_X_train: standard data supplemented with synthetic data to help with the imbalance of target distributions\n- normalize_syn_x: syn_X_train but with values normalized","metadata":{}},{"cell_type":"code","source":"encoder = OrdinalEncoder()\nencoder.fit(syn_X_train[categoricals.keys()])\n\nsyn_X_train[list(categoricals.keys())] = encoder.transform(syn_X_train[list(categoricals.keys())])\nsyn_X_train\n","metadata":{"execution":{"iopub.status.busy":"2024-04-30T19:22:19.662139Z","iopub.execute_input":"2024-04-30T19:22:19.662522Z","iopub.status.idle":"2024-04-30T19:22:21.544672Z","shell.execute_reply.started":"2024-04-30T19:22:19.662494Z","shell.execute_reply":"2024-04-30T19:22:21.543660Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"       amtinstpaidbefduel24m_4187115A  annuity_780A  annuitynextmonth_57A  \\\n58588                    16061.000000   9342.000000              0.000000   \n2788                     56012.082031   4456.399902              0.000000   \n56977                    27836.201172   6048.399902              0.000000   \n21339                    56012.082031  13105.400391              0.000000   \n61746                    81808.000000   2714.800049           5896.000000   \n...                               ...           ...                   ...   \n41215                    56012.082031   5111.600098              0.000000   \n31886                        0.000000   8281.600586           3947.199951   \n54430                     4623.000000   1715.599976              0.000000   \n63454                    56012.082031   9291.200195              0.000000   \n36673                    56012.082031   7200.000000              0.000000   \n\n       avginstallast24m_3658937A  avglnamtstart24m_4525187A  \\\n58588                5408.019531               44656.457031   \n2788                 5408.019531               44656.457031   \n56977                2530.600098               44656.457031   \n21339                5408.019531               44656.457031   \n61746                5232.800293               44656.457031   \n...                          ...                        ...   \n41215                2706.400146               44656.457031   \n31886                4308.200195               44656.457031   \n54430                3283.800049               44656.457031   \n63454                1137.200073               44656.457031   \n36673                4497.600098               24726.000000   \n\n       avgoutstandbalancel6m_4187114A  avgpmtlast12m_4525200A  \\\n58588                    46039.816406             6416.095215   \n2788                     46039.816406             6416.095215   \n56977                     3785.000000             6416.095215   \n21339                    46039.816406             6416.095215   \n61746                   201343.734375             6416.095215   \n...                               ...                     ...   \n41215                    46039.816406             6416.095215   \n31886                    56003.730469             6416.095215   \n54430                    46039.816406             6416.095215   \n63454                    46039.816406             3852.000000   \n36673                    46039.816406             6416.095215   \n\n       credamount_770A   currdebt_22A  currdebtcredtyperange_828A  ...  \\\n58588          27428.0       0.000000                     0.00000  ...   \n2788           74000.0       0.000000                     0.00000  ...   \n56977         100000.0       0.000000                     0.00000  ...   \n21339         140000.0       0.000000                     0.00000  ...   \n61746          60000.0  182534.406250                182534.40625  ...   \n...                ...            ...                         ...  ...   \n41215          64000.0       0.000000                     0.00000  ...   \n31886         161596.0       0.000000                 28276.00000  ...   \n54430          21498.0   38728.175781                     0.00000  ...   \n63454          21000.0       0.000000                     0.00000  ...   \n36673          25196.0       0.000000                     0.00000  ...   \n\n       maritalst_893M  pmtaverage_3A  pmtaverage_4527227A  \\\n58588             3.0    9292.367188         10036.295898   \n2788              3.0    9292.367188         10036.295898   \n56977             3.0    9292.367188         10036.295898   \n21339             3.0    9292.367188         10036.295898   \n61746             3.0    9292.367188         10036.295898   \n...               ...            ...                  ...   \n41215             3.0    9292.367188         10036.295898   \n31886             3.0    9292.367188         10036.295898   \n54430             3.0    9292.367188         10036.295898   \n63454             3.0    9292.367188         10036.295898   \n36673             3.0    9292.367188         10036.295898   \n\n       pmtaverage_4955615A   pmtssum_45A  total_childrenL  person_housetypeL  \\\n58588         17618.447266  13224.186523                0                3.0   \n2788          17618.447266  16108.600586                0                3.0   \n56977         17618.447266  13224.186523                0                3.0   \n21339         17618.447266  13224.186523                0                3.0   \n61746         17618.447266  16552.599609                0                3.0   \n...                    ...           ...              ...                ...   \n41215         17618.447266   3761.000000                0                3.0   \n31886         17618.447266  13224.186523                0                3.0   \n54430         17618.447266  13224.186523                0                3.0   \n63454         17618.447266  13224.186523                0                3.0   \n36673         17618.447266  13023.238281                0                3.0   \n\n       deposit_countL  total_payment_amountL  avg_annuityA  \n58588        1.379098             194.000000   1697.800049  \n2788         1.379098              79.379036   3379.669922  \n56977        1.000000             156.000000   2106.399902  \n21339        1.379098               9.000000  12156.200195  \n61746        1.379098             150.000000   3467.171387  \n...               ...                    ...           ...  \n41215        1.379098              30.000000   1919.133423  \n31886        1.379098              79.379036   1852.430786  \n54430        1.379098             142.000000   4232.600098  \n63454        1.379098             162.000000   1033.800049  \n36673        1.379098              79.379036   1381.314331  \n\n[183198 rows x 53 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>amtinstpaidbefduel24m_4187115A</th>\n      <th>annuity_780A</th>\n      <th>annuitynextmonth_57A</th>\n      <th>avginstallast24m_3658937A</th>\n      <th>avglnamtstart24m_4525187A</th>\n      <th>avgoutstandbalancel6m_4187114A</th>\n      <th>avgpmtlast12m_4525200A</th>\n      <th>credamount_770A</th>\n      <th>currdebt_22A</th>\n      <th>currdebtcredtyperange_828A</th>\n      <th>...</th>\n      <th>maritalst_893M</th>\n      <th>pmtaverage_3A</th>\n      <th>pmtaverage_4527227A</th>\n      <th>pmtaverage_4955615A</th>\n      <th>pmtssum_45A</th>\n      <th>total_childrenL</th>\n      <th>person_housetypeL</th>\n      <th>deposit_countL</th>\n      <th>total_payment_amountL</th>\n      <th>avg_annuityA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>58588</th>\n      <td>16061.000000</td>\n      <td>9342.000000</td>\n      <td>0.000000</td>\n      <td>5408.019531</td>\n      <td>44656.457031</td>\n      <td>46039.816406</td>\n      <td>6416.095215</td>\n      <td>27428.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13224.186523</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>1.379098</td>\n      <td>194.000000</td>\n      <td>1697.800049</td>\n    </tr>\n    <tr>\n      <th>2788</th>\n      <td>56012.082031</td>\n      <td>4456.399902</td>\n      <td>0.000000</td>\n      <td>5408.019531</td>\n      <td>44656.457031</td>\n      <td>46039.816406</td>\n      <td>6416.095215</td>\n      <td>74000.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>16108.600586</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>1.379098</td>\n      <td>79.379036</td>\n      <td>3379.669922</td>\n    </tr>\n    <tr>\n      <th>56977</th>\n      <td>27836.201172</td>\n      <td>6048.399902</td>\n      <td>0.000000</td>\n      <td>2530.600098</td>\n      <td>44656.457031</td>\n      <td>3785.000000</td>\n      <td>6416.095215</td>\n      <td>100000.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13224.186523</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>1.000000</td>\n      <td>156.000000</td>\n      <td>2106.399902</td>\n    </tr>\n    <tr>\n      <th>21339</th>\n      <td>56012.082031</td>\n      <td>13105.400391</td>\n      <td>0.000000</td>\n      <td>5408.019531</td>\n      <td>44656.457031</td>\n      <td>46039.816406</td>\n      <td>6416.095215</td>\n      <td>140000.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13224.186523</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>1.379098</td>\n      <td>9.000000</td>\n      <td>12156.200195</td>\n    </tr>\n    <tr>\n      <th>61746</th>\n      <td>81808.000000</td>\n      <td>2714.800049</td>\n      <td>5896.000000</td>\n      <td>5232.800293</td>\n      <td>44656.457031</td>\n      <td>201343.734375</td>\n      <td>6416.095215</td>\n      <td>60000.0</td>\n      <td>182534.406250</td>\n      <td>182534.40625</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>16552.599609</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>1.379098</td>\n      <td>150.000000</td>\n      <td>3467.171387</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>41215</th>\n      <td>56012.082031</td>\n      <td>5111.600098</td>\n      <td>0.000000</td>\n      <td>2706.400146</td>\n      <td>44656.457031</td>\n      <td>46039.816406</td>\n      <td>6416.095215</td>\n      <td>64000.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>3761.000000</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>1.379098</td>\n      <td>30.000000</td>\n      <td>1919.133423</td>\n    </tr>\n    <tr>\n      <th>31886</th>\n      <td>0.000000</td>\n      <td>8281.600586</td>\n      <td>3947.199951</td>\n      <td>4308.200195</td>\n      <td>44656.457031</td>\n      <td>56003.730469</td>\n      <td>6416.095215</td>\n      <td>161596.0</td>\n      <td>0.000000</td>\n      <td>28276.00000</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13224.186523</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>1.379098</td>\n      <td>79.379036</td>\n      <td>1852.430786</td>\n    </tr>\n    <tr>\n      <th>54430</th>\n      <td>4623.000000</td>\n      <td>1715.599976</td>\n      <td>0.000000</td>\n      <td>3283.800049</td>\n      <td>44656.457031</td>\n      <td>46039.816406</td>\n      <td>6416.095215</td>\n      <td>21498.0</td>\n      <td>38728.175781</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13224.186523</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>1.379098</td>\n      <td>142.000000</td>\n      <td>4232.600098</td>\n    </tr>\n    <tr>\n      <th>63454</th>\n      <td>56012.082031</td>\n      <td>9291.200195</td>\n      <td>0.000000</td>\n      <td>1137.200073</td>\n      <td>44656.457031</td>\n      <td>46039.816406</td>\n      <td>3852.000000</td>\n      <td>21000.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13224.186523</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>1.379098</td>\n      <td>162.000000</td>\n      <td>1033.800049</td>\n    </tr>\n    <tr>\n      <th>36673</th>\n      <td>56012.082031</td>\n      <td>7200.000000</td>\n      <td>0.000000</td>\n      <td>4497.600098</td>\n      <td>24726.000000</td>\n      <td>46039.816406</td>\n      <td>6416.095215</td>\n      <td>25196.0</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>9292.367188</td>\n      <td>10036.295898</td>\n      <td>17618.447266</td>\n      <td>13023.238281</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>1.379098</td>\n      <td>79.379036</td>\n      <td>1381.314331</td>\n    </tr>\n  </tbody>\n</table>\n<p>183198 rows × 53 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras import models\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import optimizers\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nlr_schedule = keras.optimizers.schedules.ExponentialDecay(\n    initial_learning_rate = 0.05,\n    decay_steps=2000,\n    decay_rate=0.95,\n    staircase=True)\n\nann = models.Sequential([\n    layers.Dense(1024, activation='relu', input_shape = (None, 53)),\n    layers.Dense(1024, activation='relu'),\n    layers.Dense(1024, activation='relu'),\n    layers.Dense(1024, activation='relu'),\n    layers.Dense(1)\n])\n\nann.summary()\n\n#refer to https://www.tensorflow.org/tutorials/keras/classification tutorial to check on how to use compile function\nann.compile(optimizer=keras.optimizers.Adam(lr_schedule), loss=keras.losses.BinaryCrossentropy(from_logits=True), metrics=['accuracy'])\n\n# This will start the training and save each epoch output in the history list.\nhistory_ann = ann.fit(np.asarray(syn_X_train), syn_y_train, batch_size=32, epochs=5)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T19:22:48.739481Z","iopub.execute_input":"2024-04-30T19:22:48.740230Z","iopub.status.idle":"2024-04-30T19:24:34.477415Z","shell.execute_reply.started":"2024-04-30T19:22:48.740197Z","shell.execute_reply":"2024-04-30T19:24:34.476583Z"},"trusted":true},"execution_count":50,"outputs":[{"name":"stdout","text":"Model: \"sequential_13\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n dense_59 (Dense)            (None, None, 1024)        55296     \n                                                                 \n dense_60 (Dense)            (None, None, 1024)        1049600   \n                                                                 \n dense_61 (Dense)            (None, None, 1024)        1049600   \n                                                                 \n dense_62 (Dense)            (None, None, 1024)        1049600   \n                                                                 \n dense_63 (Dense)            (None, None, 1)           1025      \n                                                                 \n=================================================================\nTotal params: 3205121 (12.23 MB)\nTrainable params: 3205121 (12.23 MB)\nNon-trainable params: 0 (0.00 Byte)\n_________________________________________________________________\nEpoch 1/5\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1714504971.259974     116 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"5725/5725 [==============================] - 24s 4ms/step - loss: 633236.6875 - accuracy: 0.4904\nEpoch 2/5\n5725/5725 [==============================] - 21s 4ms/step - loss: 5777.2759 - accuracy: 0.4887\nEpoch 3/5\n5725/5725 [==============================] - 20s 4ms/step - loss: 0.7096 - accuracy: 0.4857\nEpoch 4/5\n5725/5725 [==============================] - 20s 4ms/step - loss: 0.7051 - accuracy: 0.4860\nEpoch 5/5\n5725/5725 [==============================] - 20s 4ms/step - loss: 0.7040 - accuracy: 0.4858\n","output_type":"stream"}]},{"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras import models\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import optimizers\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\nlr_schedule = keras.optimizers.schedules.ExponentialDecay(\n    initial_learning_rate = 0.0001,\n    decay_steps=20000,\n    decay_rate=0.95,\n    staircase=True)\n\ncnn = models.Sequential([\n    layers.Conv1D(filters = 256, kernel_size = 12, activation='relu', padding = 'same', input_shape=(53, 1)),\n    layers.Conv1D(filters = 256, kernel_size = 9, activation='relu', padding = 'same'),\n    layers.MaxPooling1D(1, padding = 'same'),\n    layers.Flatten(),\n    layers.Dense(1024, activation='relu'),\n    layers.Dense(1, activation='softmax')\n])\n\ncnn.summary()\n\n#refer to https://www.tensorflow.org/tutorials/keras/classification tutorial to check on how to use compile function\ncnn.compile(optimizer='rmsprop', loss = 'binary_crossentropy', metrics=['accuracy'])\n\n# This will start the training and save each epoch output in the history list.\nhistory_cnn = cnn.fit(syn_X_train, syn_y_train, batch_size=128, epochs=2)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T19:26:38.811636Z","iopub.execute_input":"2024-04-30T19:26:38.812521Z","iopub.status.idle":"2024-04-30T19:27:18.353931Z","shell.execute_reply.started":"2024-04-30T19:26:38.812477Z","shell.execute_reply":"2024-04-30T19:27:18.353063Z"},"trusted":true},"execution_count":53,"outputs":[{"name":"stdout","text":"Model: \"sequential_16\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n conv1d_8 (Conv1D)           (None, 53, 256)           3328      \n                                                                 \n conv1d_9 (Conv1D)           (None, 53, 256)           590080    \n                                                                 \n max_pooling1d_4 (MaxPoolin  (None, 53, 256)           0         \n g1D)                                                            \n                                                                 \n flatten_4 (Flatten)         (None, 13568)             0         \n                                                                 \n dense_68 (Dense)            (None, 1024)              13894656  \n                                                                 \n dense_69 (Dense)            (None, 1)                 1025      \n                                                                 \n=================================================================\nTotal params: 14489089 (55.27 MB)\nTrainable params: 14489089 (55.27 MB)\nNon-trainable params: 0 (0.00 Byte)\n_________________________________________________________________\nEpoch 1/2\n1432/1432 [==============================] - 20s 13ms/step - loss: 250.4037 - accuracy: 0.5176\nEpoch 2/2\n1432/1432 [==============================] - 19s 13ms/step - loss: 0.2792 - accuracy: 0.5176\n","output_type":"stream"}]},{"cell_type":"code","source":"cnn.predict(syn_X_train.tail(500))","metadata":{"execution":{"iopub.status.busy":"2024-04-30T17:47:26.970159Z","iopub.status.idle":"2024-04-30T17:47:26.970646Z","shell.execute_reply.started":"2024-04-30T17:47:26.970386Z","shell.execute_reply":"2024-04-30T17:47:26.970405Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}